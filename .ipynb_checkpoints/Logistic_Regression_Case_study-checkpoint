{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "hide": true
   },
   "source": [
    "# Springboard: Logistic Regression Advanced Case Study\n",
    "\n",
    "In this case study we introduce the <b>Logistic Regression</b> algorithm, which can be used to build models that are  simple and yet effecive--in some cases. This algorithm can be used to build useful baseline models for classification problems that can be easily interpreted. For these reasons, <b>Logistic Regression</b> is considered as one of the fundamental Machine Learning algorithms associated with classification problems.\n",
    "\n",
    "Here is a list of the main concepts covered in this notebook:\n",
    "\n",
    "### Table of Contents\n",
    "* [Classification](#Classification)\n",
    "* [Citing references and data](#Citing-references-and-data)\n",
    "* [About the dataset](#About-the-dataset)\n",
    "* [The Data Science Process](#The-Data-Science-Process)\n",
    "* [Libraries that will be used](#Libraries-that-will-be-used)\n",
    "* [Loading the Data](#Loading-the-data)\n",
    "* [\"Minimal EDA\"](#\"Minimal-EDA\")\n",
    "    * [Transformaton of categorical features](#Transformation-of-categorical-features)\n",
    "    * [Proportion of classes](#Proportion-of-classes)\n",
    "    * [Side Bar: Balanced and Imbalanced Classes](#Side-Bar:-Balanced-and-Imbalanced-Classes)\n",
    "* [Optional: Building a Logistic Regression Model with Only Two Features](#Optional:-Building-a-Logistic-Regression-Model-with-Only-Two-Features)\n",
    "    * [The model building cycle](#The-model-building-cycle)\n",
    "    * [Some Comments on this Result](#Some-Comments-on-this-Result)\n",
    "* [Building a Logistic Regression Model with all Features](#Building-a-Logistic-Regression-Model-with-all-Features)\n",
    "    * [(a) Define X and y](#(a)-Define-X-and-y)\n",
    "    * [(b) Perform train/test split on $(X, y)$](#(b)-Perform-train/test-split-on-$(X,-y)$)\n",
    "    * [(c) Create an object of the class associated with the algorithm to be used--in this case LogisticRegression](#(c)-Create-an-object-of-the-class-associated-with-the-algorithm-to-be-used--in-this-case-LogisticRegression)\n",
    "    * [(d) Build an actual model using the fit method from the class associated with the algorithm to be used (using the training set)](#(d)-Build-an-actual-model-using-the-fit-method-from-the-class-associated-with-the-algorithm-to-be-used-(using-the-training-set))\n",
    "    * [(e) Predict with the built model using the predict method from the class (training set and test set)](#(e)-Predict-with-the-built-model-using-the-predict-method-from-the-class-(training-set-and-test-set))\n",
    "    * [(f) Compute performance metrics (in this case, accuracy) for the training and test predictions. In general, the metrics to be used and their interpretation will depend on the application at hand](#(f)-Compute-performance-metrics-(in-this-case,-accuracy)-for-the-training-and-test-predictions.-In-general,-the-metrics-to-be-used-and-their-interpretation-will-depend-on-the-application-at-hand)\n",
    "    * [(g) Determine if the model can be improved--repeat as needed with additional algorithms and/or by applying hyper-parameter tuning](#(g)-Determine-if-the-model-can-be-improved--repeat-as-needed-with-additional-algorithms-and/or-by-applying-hyper-parameter-tuning)\n",
    "    * [Side-Bar: NEVER EVER use just Accuracy to Measure the Performance of a Classification Algorithm!](#Side-Bar:-NEVER-EVER-use-just-Accuracy-to-Measure-the-Performance-of-a-Classification-Algorithm!)\n",
    "* [Logistic Regression Parameters in scikit-learn](#Logistic-Regression-Parameters-in-scikit-learn)\n",
    "    * [Tuning the Model](#Tuning-the-Model)\n",
    "    * [Side-Bar: Cross Validation](#Side-Bar:-Cross-Validation)\n",
    "    * [Black Box Grid Search in sklearn](#Black-Box-Grid-Search-in-sklearn)\n",
    "* [Summary](#Summary)    \n",
    "* [Optional: Appendix](#Optional:-Appendix)\n",
    "    * [A Walkthrough of the Math Behind Logistic Regression](#A-Walkthrough-of-the-Math-Behind-Logistic-Regression)\n",
    "    * [The Probabalistic Interpretation](#The-Probabalistic-Interpretation)\n",
    "    * [Maximizing the Probability of the Training Set](#Maximizing-the-Probability-of-the-Training-Set)\n",
    "    * [Discriminative vs Generative Classifiers](#Discriminative-vs-Generative-Classifiers)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Credits  \n",
    "  \n",
    "We've adapted some parts of this Case Study from [Lab 5 in the CS109 course](https://github.com/cs109/2015lab5) course. Please feel free to check out the original lab, both for more exercises, as well as some ideas for this project.  \n",
    "  \n",
    "Blaine Bateman--Data Scientist, Springboard DSC TA, updated & formatted  \n",
    "  \n",
    "AJ Sanchez--Data Scientist & Software Engineer, Springboard DSC Mentor, reviewed & suggested improvements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Classification tries to predict which of a set of classes an observation belongs to, where classes are things like \"dog or cat\". Mathematically, the aim is to find a model $G(X, y)$ where $X$ is a matrix of features constructed from the data, and $y$ is a vector of class labels associated with each row (instance) in $X$, such that the model $G$ does a good job predicting classes given new data $X'$. For instance, consider a doctor trying to assess whether a paitent has heart disease and needs treatment. In this case, the classes are \"has heart disease\" or \"does not have heart disease\". To have a machine do this well, we would typically feed the machine a set of data about prior patients along with whether they had heart disease (determined by some other examinations or tests), and *train* the model with the *features* (things observed about the patients, like age, weight, etc.) and the *labels* (whether the patient had heart disease). Then, given the same observations (i.e. the same features) for a *new* patient, the trained model returns the class associated with such observations, which can be used as a predictor of whether the person has heart disease or not.\n",
    "\n",
    "The main idea on which the Logistic Regression algorithm is based is shown schematically in the image below, for a simple case of two features (a.k.a. 2-D feature space). In its simpler form, the algorithm tries to find a line that divides \"things\" of two different types in this 2-D feature space. Such a line is usually called a decision boundary, but in general, the decision boundary might have a more complex form, and be in a higher dimensional space (that isn't easily represented in a 2-D chart). Of course, in reality most problems are more complex and are modeled with more than 2 dimensions, as we will see in this Case Study.\n",
    "\n",
    "![Splitting using a single line](images/onelinesplit.png)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Case Study Problem Definition: Predicting Heart Disease"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll use a dataset containing anonymous health information to build models to predict the presence or absence of heart disease from facts and measurements on a group of adults to hone our understanding of classifiers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Citing references and data\n",
    "It's a good idea to cite the sources when you use code and data from somewhere else.  In this case, the data we will use was adapted from:  \n",
    "  \n",
    "https://archive.ics.uci.edu/ml/datasets/heart+disease"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### About the dataset\n",
    "\n",
    "There are multiple datasets available at the link, for this study we started with the processed Cleveland data (see [UCI heart disease Cleveland data](https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data)).  We updated the column names to be more self-explanatory, and removed a small number of observations missing one or more values. Please feel free to review the information and references on the UCI site to learn more about the data, as well as see versions with more features."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Data Science Process"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should recall from the Guided Capstone, that we are following the Data Science Process:\n",
    " - Step One: Problem Identification\n",
    " - Step Two: Data Wrangling\n",
    " - Step Three: Exploratory Data Analysis\n",
    " - Step Four: Pre-processing and Training Data Development\n",
    " - Step Five: Modeling\n",
    " - Step Six: Documentation\n",
    " \n",
    "In this Case Study, we **won't complete all the steps**, but you should keep them in mind as you progress through the remainder of the project. For example, we have already completed Step One--the problem is to use machine learning to help doctors asses whether a paitent has heart disease or not, using information from examinations. Also, we noted we removed some cases with missing values, as a brief version of Step Two. Importantly, we've will highly abbreviate Step Three--EDA. In most projects you would want to spend considerable time on EDA. Step Four will be addressed as we deal with categorial variables later and split the data into training, validation, and test sets. Most of your time in the Case Study will be spend on Step Five, Modeling. In a complete project, you would often prepare a report or some presentation materials for Step Six, but will not do that here.\n",
    "\n",
    "We suggest you discuss with your mentor how these various steps can be fully addressed, and consider developing them for \"extra credit\" 😉."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this study we are going to use scikit-learn to build classification models, and we need a few other modules to visualize data and manipulate the data before modeling. Here, load the needed modules."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Libraries that will be used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "hide": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded Libraries\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "#\n",
    "# data manipulation and math\n",
    "#\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "import pandas as pd\n",
    "#\n",
    "# plotting and visualization\n",
    "#\n",
    "import matplotlib as mpl\n",
    "import matplotlib.cm as cm\n",
    "from matplotlib.colors import ListedColormap\n",
    "import matplotlib.pyplot as plt\n",
    "#\n",
    "import seaborn as sns\n",
    "#\n",
    "# modeling\n",
    "#\n",
    "from sklearn.preprocessing import OneHotEncoder as OHE\n",
    "import sklearn.model_selection\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import ConfusionMatrixDisplay\n",
    "#\n",
    "print(\"Loaded Libraries\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Note**  \n",
    "It is a good practice to put all module imports in one cell near the top of the notebook, or a group of cells near the top.  This makes it easier for another person to use your notebook later--they can see what might be needed in their Python envioronment before getting far into the notebook and having a failed import.  As you find needed modules while you develop your code, add them to a common cell near the top."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we want to set some options in Jupyter and for Matplotlib, Pandas and Seaborn. Don't worry if you are familiar with all the settings here--you can look them up easily if you want to customize them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=sns.color_palette()[0]\n",
    "c1=sns.color_palette()[1]\n",
    "c2=sns.color_palette()[2]\n",
    "\n",
    "cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF'])\n",
    "cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])\n",
    "cm = plt.cm.RdBu\n",
    "cm_bright = ListedColormap(['#FF0000', '#0000FF'])\n",
    "\n",
    "def points_plot(ax, Xtr, Xte, ytr, yte, clf, mesh=True, colorscale=cmap_light, \n",
    "                cdiscrete=cmap_bold, alpha=0.1, psize=10, zfunc=False, predicted=False):\n",
    "    h = .02\n",
    "    X=np.concatenate((Xtr, Xte))\n",
    "    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\n",
    "    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5\n",
    "    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),\n",
    "                         np.linspace(y_min, y_max, 100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a final step of preparations, we provide two utility functions we will use to illustrate the concepts of classification using logistic regresssion. \n",
    "\n",
    "Putting this code in functions makes it efficient to re-use, as well as easier to maintain and fine-tune over time. Feel free to come back to the code for these functions and understand what they do when you use them later in the Case Study."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "def points_plot(ax, Xtr, Xte, ytr, yte, \n",
    "                clf, \n",
    "                mesh = True, colorscale = cmap_light, cdiscrete = cmap_bold, \n",
    "                alpha = 0.1, psize = 10, \n",
    "                zfunc = False, predicted = False):\n",
    "#\n",
    "# note: this function only works for X.shape = (:, 2)\n",
    "# it is intended to illustrate the classifier boundary\n",
    "#\n",
    "# get the column names if they exist to apply\n",
    "# to the meshed data generated below\n",
    "#\n",
    "    try:\n",
    "        feature_names = Xtr.columns\n",
    "    except:\n",
    "        feature_names = None\n",
    "#        \n",
    "    Xtrain = np.array(Xtr)\n",
    "    Xtest = np.array(Xte)\n",
    "#\n",
    "    h = 0.02\n",
    "#\n",
    "# create a uniform grid spanning the range of the X values\n",
    "# note that y here is NOT the target, it is the 2nd\n",
    "# dimension of the desired plot\n",
    "#\n",
    "    X = np.concatenate((Xtrain, Xtest))\n",
    "    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\n",
    "    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5\n",
    "    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),\n",
    "                         np.linspace(y_min, y_max, 100))\n",
    "#\n",
    "# predict the target value at each point in the grid\n",
    "#\n",
    "# this method uses the probabilities from the classifier\n",
    "# and applies a function to determine the class\n",
    "#\n",
    "    if zfunc:\n",
    "        mesh_data = np.c_[xx.ravel(), yy.ravel()]\n",
    "        if feature_names is not None:\n",
    "            mesh_data = pd.DataFrame(mesh_data, \n",
    "                         columns = feature_names)\n",
    "        p0 = clf.predict_proba(mesh_data)[:, 0]\n",
    "        p1 = clf.predict_proba(mesh_data)[:, 1]\n",
    "        Z = zfunc(p0, p1)\n",
    "#\n",
    "# this method uses the classifier to predict the classes directly\n",
    "#\n",
    "    else:\n",
    "        mesh_data = np.c_[xx.ravel(), yy.ravel()]\n",
    "        if feature_names is not None:\n",
    "            mesh_data = pd.DataFrame(mesh_data, \n",
    "                                     columns = feature_names)\n",
    "        Z = clf.predict(mesh_data)\n",
    "    ZZ = Z.reshape(xx.shape)\n",
    "#\n",
    "# plt.pcolormesh() creates a shaded result over the grid\n",
    "#\n",
    "    if mesh:\n",
    "        plt.pcolormesh(xx, yy, ZZ, \n",
    "                       cmap = cmap_light, \n",
    "                       alpha = alpha, \n",
    "                       axes = ax, \n",
    "                       shading = 'auto')\n",
    "#\n",
    "# add the points to the plot\n",
    "# these can be the original target values\n",
    "# or the predicted values\n",
    "#\n",
    "    if predicted:\n",
    "        showtr = clf.predict(Xtr)\n",
    "        showte = clf.predict(Xte)\n",
    "    else:\n",
    "        showtr = ytr\n",
    "        showte = yte\n",
    "#\n",
    "# plot training points\n",
    "#\n",
    "    ax.scatter(Xtrain[:, 0], Xtrain[:, 1], \n",
    "               c = showtr - 1, \n",
    "               cmap = cmap_bold, \n",
    "               s = psize, \n",
    "               alpha = alpha, \n",
    "               edgecolor = \"k\")\n",
    "#    \n",
    "# plot testing points\n",
    "#\n",
    "    ax.scatter(Xtest[:, 0], Xtest[:, 1],\n",
    "               c = showte - 1, \n",
    "               cmap = cmap_bold, \n",
    "               s = psize + 10,\n",
    "               alpha = alpha, \n",
    "               marker = \"s\")\n",
    "    ax.set_xlim(xx.min(), xx.max())\n",
    "    ax.set_ylim(yy.min(), yy.max())\n",
    "#\n",
    "    return ax, xx, yy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "def points_plot_prob(ax, Xtr, Xte, ytr, yte, \n",
    "                     clf, colorscale = cmap_light, cdiscrete = cmap_bold, \n",
    "                     ccolor = cm, \n",
    "                     alpha = 0.1, psize = 10):\n",
    "    try:\n",
    "        feature_names = Xtr.columns\n",
    "    except:\n",
    "        feature_names = None\n",
    "#        \n",
    "    Xtrain = np.array(Xtr)\n",
    "    Xtest = np.array(Xte)\n",
    "#    \n",
    "    ax, xx, yy = points_plot(ax, Xtr, Xte, ytr, yte,\n",
    "                         clf,\n",
    "                         mesh = False, \n",
    "                         colorscale = colorscale, cdiscrete = cdiscrete, \n",
    "                         psize = psize, alpha = alpha,\n",
    "                         predicted = True) \n",
    "    mesh_data = np.c_[xx.ravel(), yy.ravel()]\n",
    "    if feature_names is not None:\n",
    "        mesh_data = pd.DataFrame(mesh_data, \n",
    "                     columns = feature_names)    \n",
    "    Z = clf.predict_proba(mesh_data)[:, 1]\n",
    "    Z = Z.reshape(xx.shape)\n",
    "    plt.contourf(xx, yy, Z, cmap = ccolor, alpha = 0.2)\n",
    "    cs2 = plt.contour(xx, yy, Z, cmap = ccolor, alpha = 0.6)\n",
    "    plt.clabel(cs2, fmt = '%2.1f', colors = 'k', fontsize = 12)\n",
    "#\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Loading the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a first step, read in the data and view all the columns, and display the top of the DataFrame using head()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The data have  270  rows and  14  columns\n",
      "\n",
      "column names: \n",
      "\n",
      "age_yr\n",
      "sex_M_F\n",
      "chest_pain_value\n",
      "resting_BP_mm_Hg\n",
      "cholesterol_mg_dl\n",
      "fasting_blood_sugar_high\n",
      "ECG_value\n",
      "max_HR\n",
      "exercise_angina\n",
      "ST_depresssion_exercise\n",
      "ST_slope_peak\n",
      "number_vessels_involved\n",
      "defect_diag\n",
      "heart_disease\n"
     ]
    }
   ],
   "source": [
    "dflog = pd.read_excel(\"./data/heart.xlsx\")\n",
    "#\n",
    "print('The data have ', dflog.shape[0], ' rows and ', dflog.shape[1], ' columns\\n')\n",
    "print('column names: \\n')\n",
    "print('\\n'.join(list(dflog.columns)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### \"Minimal EDA\"\n",
    "\n",
    "Earlier we reviewed the Data Science Process and noted we would not fully complete all steps here, and in particular much more time would normally be spent on Exploratory Data Analysis (EDA). Here, we look at the first few rows of the data, plot the variables to get a feel for the data, then apply some necessary transformations followed by inspecting the distribution of the two result classes (heart disease present or not present)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age_yr</th>\n",
       "      <th>sex_M_F</th>\n",
       "      <th>chest_pain_value</th>\n",
       "      <th>resting_BP_mm_Hg</th>\n",
       "      <th>cholesterol_mg_dl</th>\n",
       "      <th>fasting_blood_sugar_high</th>\n",
       "      <th>ECG_value</th>\n",
       "      <th>max_HR</th>\n",
       "      <th>exercise_angina</th>\n",
       "      <th>ST_depresssion_exercise</th>\n",
       "      <th>ST_slope_peak</th>\n",
       "      <th>number_vessels_involved</th>\n",
       "      <th>defect_diag</th>\n",
       "      <th>heart_disease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>130</td>\n",
       "      <td>322</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>109</td>\n",
       "      <td>0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>115</td>\n",
       "      <td>564</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>160</td>\n",
       "      <td>0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>57</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>124</td>\n",
       "      <td>261</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>64</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>128</td>\n",
       "      <td>263</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>105</td>\n",
       "      <td>1</td>\n",
       "      <td>0.2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>120</td>\n",
       "      <td>269</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>121</td>\n",
       "      <td>1</td>\n",
       "      <td>0.2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age_yr  sex_M_F  chest_pain_value  resting_BP_mm_Hg  cholesterol_mg_dl  \\\n",
       "0      70        1                 4               130                322   \n",
       "1      67        0                 3               115                564   \n",
       "2      57        1                 2               124                261   \n",
       "3      64        1                 4               128                263   \n",
       "4      74        0                 2               120                269   \n",
       "\n",
       "   fasting_blood_sugar_high  ECG_value  max_HR  exercise_angina  \\\n",
       "0                         0          2     109                0   \n",
       "1                         0          2     160                0   \n",
       "2                         0          0     141                0   \n",
       "3                         0          0     105                1   \n",
       "4                         0          2     121                1   \n",
       "\n",
       "   ST_depresssion_exercise  ST_slope_peak  number_vessels_involved  \\\n",
       "0                      2.4              2                        3   \n",
       "1                      1.6              2                        0   \n",
       "2                      0.3              1                        0   \n",
       "3                      0.2              2                        1   \n",
       "4                      0.2              1                        1   \n",
       "\n",
       "   defect_diag  heart_disease  \n",
       "0            3              1  \n",
       "1            7              0  \n",
       "2            7              1  \n",
       "3            7              0  \n",
       "4            3              0  "
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dflog.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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6qmnlJSUJLvdrnbt2unNN9/0UrWBq77zXFBQoE6dOql58+aKj4/X8OHDdfz4cS9VG5jWrVunzMxMJSQkyGazaenSpT97jtfvhRbctmjRIiskJMR6/fXXrT179lhjx461wsLCrIMHD16w/zfffGM1b97cGjt2rLVnzx7r9ddft0JCQqz333/fy5UHlvrO89ixY62//vWv1hdffGF99dVX1qRJk6yQkBBr69atXq488NR3rs87deqUdc0111jp6elWp06dvFNsAHNnnu+44w6rW7duVmFhobV//37rf/7nf6xPP/3Ui1UHnvrO8/r1660mTZpYL7zwgvXNN99Y69evtzp06GDdeeedXq48sHz00UfWU089Zf3973+3JFlLliy5ZH9f3AsJOw3QtWtXa8yYMS5t1113nTVx4sQL9n/yySet6667zqVt9OjRVvfu3RutRhPUd54v5Prrr7emTp3q6dKM4+5cDxkyxPrzn/9sTZ48mbBzGeo7z//85z+tyMhI6/jx494ozxj1necZM2ZY11xzjUvbiy++aLVq1arRajTN5YQdX9wLeY3lprNnz2rLli1KT093aU9PT9fGjRsveM5nn31Wp/9tt92mzZs3q7q6utFqDWTuzPNP1dbWqry8XFFRUY1RojHcnev8/Hzt27dPkydPbuwSjeDOPH/44YdKTU3V9OnTdfXVV6t9+/bKycnRmTNnvFFyQHJnnnv06KEjR47oo48+kmVZ+u677/T+++9r4MCB3ij5F8MX90Ijvi7CF44dO6aampo636weGxtb5xvYzyspKblg/3PnzunYsWOKj49vtHoDlTvz/FMzZ85UZWWl7r333sYo0RjuzHVRUZEmTpyo9evXKziYf04uhzvz/M0332jDhg1q2rSplixZomPHjumRRx7RiRMnWLdzEe7Mc48ePVRQUKAhQ4bohx9+0Llz53THHXfopZde8kbJvxi+uBfyZKeBbDaby75lWXXafq7/hdrhqr7zfN4777yjKVOmaPHixYqJiWms8oxyuXNdU1OjYcOGaerUqWrfvr23yjNGff5O19bWymazqaCgQF27dtWAAQOUl5enefPm8XTnZ9Rnnvfs2aM//OEPeuaZZ7RlyxZ9/PHH2r9/P18q3Qi8fS/kf8XcFB0draCgoDr/h1BaWlonsZ4XFxd3wf7BwcFq0aJFo9UayNyZ5/MWL16skSNH6r333lO/fv0as0wj1Heuy8vLtXnzZm3btk2PPfaYpB9vypZlKTg4WMuXL1efPn28UnsgcefvdHx8vK6++mpFRkY6237961/LsiwdOXJEycnJjVpzIHJnnnNzc9WzZ0898cQTkqTf/OY3CgsL06233qpnn32Wp+8e4ot7IU923BQaGqouXbqosLDQpb2wsFA9evS44Dk333xznf7Lly9XamqqQkJCGq3WQObOPEs/PtHJzs7W22+/zfv2y1TfuY6IiNDOnTu1fft25zZmzBj96le/0vbt29WtWzdvlR5Q3Pk73bNnTx09elQVFRXOtq+++kpNmjRRq1atGrXeQOXOPJ8+fVpNmrjeFoOCgiT9/ycPaDif3AsbbenzL8D5jzXOnTvX2rNnjzVu3DgrLCzMOnDggGVZljVx4kTrwQcfdPY//3G7P/7xj9aePXusuXPn8tHzy1DfeX777bet4OBg6+WXX7aKi4ud26lTp3x1CQGjvnP9U3wa6/LUd57Ly8utVq1aWXfffbe1e/dua+3atVZycrL18MMP++oSAkJ95zk/P98KDg62XnnlFWvfvn3Whg0brNTUVKtr166+uoSAUF5ebm3bts3atm2bJcnKy8uztm3b5vyIvz/cCwk7DfTyyy9bSUlJVmhoqNW5c2dr7dq1zmNZWVlWr169XPqvWbPGuvHGG63Q0FCrTZs21pw5c7xccWCqzzz36tXLklRny8rK8n7hAai+f6f/L8LO5avvPP/rX/+y+vXrZzVr1sxq1aqVNX78eOv06dNerjrw1HeeX3zxRev666+3mjVrZsXHx1v333+/deTIES9XHVhWr159yX9z/eFeaLMsns0BAABzsWYHAAAYjbADAACMRtgBAABGI+wAAACjEXYAAIDRCDsAAMBohB0AAGA0wg4AADAaYQcAABiNsAMAAIxG2AEAAEb7f2zbIAXBNwryAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for col in list(dflog.columns):\n",
    "    dflog[col].plot(kind = 'hist', title = col)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Without completing a full EDA, we can see that some variables take on values that denote classes or categories (such as sex_M_F, fasting_blood_sugar_high), and thus are categorical, and some take on values that are a measure (such as age, blood pressure, cholesterol) and therefore are non-categorical.  Depending upon the models you choose to apply to these data, some additional preparation might be in order, such as ensuring the non-categorical values are all in sensible ranges (such as, what is a feasbile maximum value for cholesterol?), possibly scaling some of the variables, and generally ensuring you understand the data and they are suitable for a given model, to mention only a few.  Here, we will need to transform the categorical values to use them in a logistic regression model, which we will come to shortly."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before moving on to modeling, let's look at some of the features of the dataset.\n",
    "\n",
    "> **Note**  \n",
    "Moving forward, we might use the terms \"variable\" and \"feature\" interchageably, to represent the concept of the independent or $\\textbf{X}$ data. In general, there might be nuanced differences in these concepts, such as variable referring to the orignal data and feature referring to a transformed version of it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "first 6 lines of age data:\n",
      " 0    70\n",
      "1    67\n",
      "2    57\n",
      "3    64\n",
      "4    74\n",
      "5    65\n",
      "Name: age_yr, dtype: int64\n",
      "\n",
      "summary statistics of age:\n",
      " count    270.000000\n",
      "mean      54.433333\n",
      "std        9.109067\n",
      "min       29.000000\n",
      "25%       48.000000\n",
      "50%       55.000000\n",
      "75%       61.000000\n",
      "max       77.000000\n",
      "Name: age_yr, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "# extract the age as a Series, and inspect the values\n",
    "#\n",
    "x = dflog['age_yr']\n",
    "print('first 6 lines of age data:\\n', x.head(6))\n",
    "print('\\nsummary statistics of age:\\n', x.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "first six lines of blood pressure data:\n",
      " 0    130\n",
      "1    115\n",
      "2    124\n",
      "3    128\n",
      "4    120\n",
      "5    120\n",
      "Name: resting_BP_mm_Hg, dtype: int64\n",
      "\n",
      "summary statistics of blood pressure:\n",
      " count    270.000000\n",
      "mean     131.344444\n",
      "std       17.861608\n",
      "min       94.000000\n",
      "25%      120.000000\n",
      "50%      130.000000\n",
      "75%      140.000000\n",
      "max      200.000000\n",
      "Name: resting_BP_mm_Hg, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "# do the same for the resting blood pressure\n",
    "#\n",
    "y = dflog['resting_BP_mm_Hg']\n",
    "print('first six lines of blood pressure data:\\n', y.head(6))\n",
    "print('\\nsummary statistics of blood pressure:\\n', y.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Transformation of categorical features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In general, categorical features need to be transformed or *encoded* to be used in some machine learning models, as is the case for Logistic Regression. A common transformation is so-called *dummy encoding*, where each possible value of a feature becomes a new column, and a 1 is placed in that column if the data instance (a row of the data) contained that value, and a 0 is placed in that column otherwise.  \n",
    "\n",
    "For example, suppose we had a column in a hypothetical data set called species, and it contained one of two values, \"cat\" or \"dog\". The column might look like this:\n",
    "```\n",
    "species\n",
    "cat\n",
    "cat\n",
    "dog\n",
    "dog\n",
    "cat\n",
    "dog\n",
    "...\n",
    "```\n",
    "\n",
    "Dummy encoding would replace this with two columns:\n",
    "```\n",
    "species_cat   species_dog\n",
    "    1              0\n",
    "    1              0\n",
    "    0              1\n",
    "    0              1\n",
    "    1              0\n",
    "    0              1\n",
    "   ...            ...\n",
    "```\n",
    "This method extends to as many unique values there are in a given feature. Here we use the Pandas method get_dummies() (*) to transform a subset of columns. Note how we can specify which columns we want to be transformed, so we make a list of them first. If the columns are not specified, Pandas will decide which columns are categorical based on the Pandas type, and convert those. This can be convenient but is not always what is desired. For clarity, we explicitly define them here.\n",
    "\n",
    "---\n",
    " (*) [pandas.get_dummies()](https://pandas.pydata.org/docs/reference/api/pandas.get_dummies.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The data have  270  rows and  24  columns\n",
      "\n",
      "column names: \n",
      "\n",
      "age_yr\n",
      "resting_BP_mm_Hg\n",
      "cholesterol_mg_dl\n",
      "fasting_blood_sugar_high\n",
      "max_HR\n",
      "exercise_angina\n",
      "ST_depresssion_exercise\n",
      "number_vessels_involved\n",
      "heart_disease\n",
      "sex_M_F_0\n",
      "sex_M_F_1\n",
      "chest_pain_value_1\n",
      "chest_pain_value_2\n",
      "chest_pain_value_3\n",
      "chest_pain_value_4\n",
      "ECG_value_0\n",
      "ECG_value_1\n",
      "ECG_value_2\n",
      "ST_slope_peak_1\n",
      "ST_slope_peak_2\n",
      "ST_slope_peak_3\n",
      "defect_diag_3\n",
      "defect_diag_6\n",
      "defect_diag_7\n"
     ]
    }
   ],
   "source": [
    "categorical_features = ['sex_M_F',\n",
    "                        'chest_pain_value',\n",
    "                        'ECG_value',\n",
    "                        'ST_slope_peak',\n",
    "                        'defect_diag']\n",
    "dflog = pd.get_dummies(dflog, columns = categorical_features)\n",
    "print('The data have ', dflog.shape[0], ' rows and ', dflog.shape[1], ' columns\\n')\n",
    "print('column names: \\n')\n",
    "print('\\n'.join(list(dflog.columns)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Proportion of classes\n",
    "When building classification models, it is always a good idea to know right away the number of samples per class, proportionally to the total number of samples. First we get the counts of each class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "heart_disease\n",
       "0    150\n",
       "1    120\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class_counts = dflog['heart_disease'].value_counts()\n",
    "class_counts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that class_counts is a Pandas Series object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(class_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can easily compute the relative frequencies (percentages) to better quantify differences in the incidences of the classes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    55.555556\n",
       "1    44.444444\n",
       "dtype: float64"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class_percentages = pd.Series([(x / dflog.shape[0]) * 100.00 for x in class_counts])\n",
    "class_percentages"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can use the percentages as labels and plot the distribution of the two classes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.bar(class_counts.index, class_counts)\n",
    "ax.set_xticks([0, 1])\n",
    "ax.set_xticklabels(class_percentages.index.astype(str) + '\\n' + ' ' +\n",
    "                   class_percentages.round(0).astype(str) + '%')\n",
    "ax.set_ylabel('Count')\n",
    "ax.set_xlabel('Heart Disease')\n",
    "ax.set_title('Heart Disease class distribution\\nwhere 1 means presence of heart disease',\n",
    "              fontsize = 10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The code above can be easily generalized to handle multiple classes, and we invite you to give it a try, in consulation with your mentor."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Side-Bar: Balanced and Imbalanced Classes\n",
    "For a binary classification problem (two classes), the problem is called *balanced* if the number of elements of each class is about the same--in other words, each class would have a size that is about 50% of the total number of elements in the dataset. In this particular case study, one would say that this problem is slightly imbalanced, since the difference in the percentages is about 10%. When there is a imbalance among the classes in a binary classification problem, one usually refers to them as the *minority class*, and the *majority class*.\n",
    "\n",
    "In practice, *Imbalanced Classification Problems* (ICP) are very common in situations where one is modeling events that are not common, and thus these events would be instances of the *minority* class. Examples of these problems include: study of diseases such as Cancer, study of processes such as fraud, and--in general--the study of rare anomalies within a system. It is common to find instances of these problems where the difference in the percentages is 80% or more.\n",
    "\n",
    "There are two important challenges posed by ICPs:\n",
    "\n",
    "- The difference in the size of the classes is *inherent* to the problem under study. This means that one cannot pave this difference by adding more elements to the minority class.\n",
    "\n",
    "- Classification algorithms are usually negatively affected by the lack of sufficient samples of the minority class, in that the models built with them are practically unable to differentiate the minority class from the majority class, where the former is the one of interest. For instance, imagine a model built to compute the likelihod of a patient developing Cancer that nearly always predicts a small likelihood for this class (meaning, that the model predicts NO Cancer, when it should have predicted Cancer in some cases).\n",
    "\n",
    "Since this particular case study deals with a slight imbalance among the classes, we might be able to build useful models with the given dataset--without introducing additional interventions. One general approach to deal with ICP is by either generating sythetic data (a.k.a. *oversampling*), or by generating a set of smaller \"majority classes\" by taking chunks from the original majority class (a.k.a. *undersampling*). In general, these approaches are collectively referred to as *resampling*.\n",
    "\n",
    "We will not practice these concepts in this case study, but you might have the opportinity to do so in your capstone projects. Discuss this possibility with your mentor if/when applicable.\n",
    "\n",
    "Finally, the concepts discussed above can be easily generalized to ICPs with a number of classes greater than 2 (*Imbalanced Multi-Class Classification Problems*--IMCP)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "bGHuU_GXHumg"
   },
   "source": [
    "<div class=\"span5 alert alert-info\">\n",
    "<h3>Checkup Exercise Set I</h3>\n",
    "\n",
    "<ul>\n",
    "  <li> <b>Exercise:</b> Create a scatter plot of Blood Pressure vs. Cholesterol Level\n",
    "  <li> <b>Exercise:</b> Color the points differently by the Presence of Heart Disease\n",
    "</ul>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "vyozMZQ4HunB"
   },
   "source": [
    "#### Optional: Building a Logistic Regression Model with Only Two Features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to demonstrate a simple case where $X$ has only two dimensions and therefore we can plot the classification results in an x-y plot. The utility function we provided will shade the classifier results for the two target classes, on a plot of the two $X$ features. To do this, we'll choose just two of the features of the heart disease data.\n",
    "\n",
    "Recall our features are:\n",
    "```\n",
    "age_yr\n",
    "resting_BP_mm_Hg\n",
    "choleterol_mg_dl\n",
    "fasting_blood_sugar_high\n",
    "max_HR\n",
    "exercise_angina\n",
    "ST_depresssion_exercise\n",
    "number_vessels_involved\n",
    "heart_disease\n",
    "sex_M_F_0\n",
    "sex_M_F_1\n",
    "chest_pain_value_1\n",
    "chest_pain_value_2\n",
    "chest_pain_value_3\n",
    "chest_pain_value_4\n",
    "ECG_value_0\n",
    "ECG_value_1\n",
    "ECG_value_2\n",
    "ST_slope_peak_1\n",
    "ST_slope_peak_2\n",
    "ST_slope_peak_3\n",
    "defect_diag_3\n",
    "defect_diag_6\n",
    "defect_diag_7\n",
    "```\n",
    "\n",
    "...of which we are choosing for this example: ``cholesterol`` and ``blood pressure``."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The model building cycle\n",
    " \n",
    "Now we apply the pattern that should be familiar to you:\n",
    "\n",
    "> (a) train/test split  \n",
    "> (b) create an object of the class associated with the algorithm to be\n",
    " used--in this case LogisticRegression  \n",
    "> (c) build an actual model using the \"fit\" method from the class (applied to the training set)  \n",
    "> (d) predict with the built model using the \"predict\" method from the class (training set and test set)  \n",
    "> (e) compute performance metrics (in this case, accuracy) for the training and test predictions  \n",
    "\n",
    "consider\n",
    "\n",
    "> (a) how the parameters passed to train_test_split are computed \"on-the-fly\", what their types are expected to be, and what are the values of the parameters that are not passed explicitly, which will take the default values per the documentation of the method train_test_split ...  \n",
    "\n",
    "> The documentation can be viewed at: [sklearn.model_selection.train_test_split](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) or you can run ``help(train_test_split)`` in a notebook cell after the module has been imported"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "Xtrain, Xtest, ytrain, ytest = train_test_split(dflog[['cholesterol_mg_dl','resting_BP_mm_Hg']],\n",
    "                                                dflog['heart_disease'],\n",
    "                                                train_size = 0.80,\n",
    "                                                random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> (b) create an object of the class associated with the algorithm to be used--in this case LogisticRegression: also, compare the parameters passed against the expected parameters, and default parameters being used per the documentation of the constructor of class LogisticRegression\n",
    "\n",
    "> The documentation can be viewed at: [sklearn.linear_model.LogisticRegression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html) or you can run ``help(LogisticRegression)`` in a notebook cell after the module has been imported"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier = LogisticRegression(solver = 'liblinear', max_iter = 500, C = 1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> (c) create an actual model using the \"fit\" method for the class applied to the training set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(C=1000, max_iter=500, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(C=1000, max_iter=500, solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(C=1000, max_iter=500, solver='liblinear')"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier.fit(Xtrain, ytrain)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> (e.1) compute performance metrics (in this case, accuracy) for the training and test predictions... notice how accuracy_score receives the result from classifier.predict(Xtrain), and compares it with ytrain to produce the training accuracy \n",
    "\n",
    "> the documentation can be viewed at: [sklearn.metrics.accuracy_score](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html) or you can run ``help(accuracy_score)`` in a notebook cell after the module has been imported"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on training data: 0.61\n"
     ]
    }
   ],
   "source": [
    "print(f'Accuracy on training data: {accuracy_score(classifier.predict(Xtrain), ytrain):.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> (e.2) compute performance metrics (in this case, accuracy) for the training and test predictions... notice how accuracy_score receives the result from classifier.predict(Xtest), and compares it with ytest to produce the testing accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on test data: 0.59\n"
     ]
    }
   ],
   "source": [
    "print(f'Accuracy on test data: {accuracy_score(classifier.predict(Xtest), ytest):.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "as mentioned above, we can now see graphically how the model is differentiating elements of both classes after being built with only two features (Cholesterol Level, and Resting Blood Pressure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "ax = plt.gca()\n",
    "ax.set_ylabel('Resting blood pressure (mm Hg)')\n",
    "ax.set_xlabel('Cholesterol level (mg/dl)')\n",
    "ax.set_title('Computed Decision Boundary:\\n ' +\n",
    "             'Cholesterol Level (mg/dl) VS Resting Blood Pressure (mm Hg)' +\n",
    "             '\\n Red: Heart Disease | Blue: No Heart Disease' +\n",
    "             '\\n Circles: Training Set | Squares: Testing Set\\n',\n",
    "            fontsize = 10)\n",
    "_ = points_plot(ax, Xtrain, Xtest, ytrain, ytest, classifier, alpha = 0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can (and should) use sklearn's classification_report() function to see more details about what the classifier is actually doing.  You should be familiar with these additional metrics. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report for Training Data\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.61      0.78      0.68       117\n",
      "           1       0.61      0.40      0.48        99\n",
      "\n",
      "    accuracy                           0.61       216\n",
      "   macro avg       0.61      0.59      0.58       216\n",
      "weighted avg       0.61      0.61      0.59       216\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Classification Report for Training Data\")\n",
    "print(classification_report(ytrain, classifier.predict(Xtrain)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report for Test Data\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.63      0.82      0.71        33\n",
      "           1       0.45      0.24      0.31        21\n",
      "\n",
      "    accuracy                           0.59        54\n",
      "   macro avg       0.54      0.53      0.51        54\n",
      "weighted avg       0.56      0.59      0.56        54\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Classification Report for Test Data\")\n",
    "print(classification_report(ytest, classifier.predict(Xtest)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Some Comments on this Result\n",
    "\n",
    "In the figure, class 0 (no heart disease) is shaded red, and class 1 (heart disease) is shaded blue.  The train labels are plotted as circles, using the same color scheme, while the test data are plotted as squares.  Some points that are evident for this simple classifier:\n",
    "\n",
    "- The classifier tends to suggest heart disease as either blood pressure or choleterol increase.  This seems intuitively correct.\n",
    "- The classifier isn't very good!  The accuracy on the training data is only 61%, and the accuracy on the testing data is barely better than random chance (59%)--where random chance if 50%.  This isn't surprising since we are using only two features.\n",
    "- Moreover, notice that the classification report shows that the model performs poorly when trying to recognize inputs that belong to class 1 (*the class of interest*), which is indicated by the poor values of precision, recall, and f1-score for class 1--for the training set and test set.\n",
    "- The \"decision boundary\" is a line. As we add more features, we won't be able to represent the boundary this way. The boundary becomes what is called a hyperplane, which is the generalization of a line into 3 or more dimensions. But here, a patient measured with a combination of cholesterol and blood pressure to the right of the line (in the blue region) would be classified as likely having heart disease.\n",
    "\n",
    "We now move on to investigate how to get a better classifier that is optimized on the data and will perform well in the future."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building a Logistic Regression Model with all Features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After having seen the results of a model built with only two features, we are now going to turn our attention to building a full-fledged model using all the features, and will compare this model with the previous one, with respect to several performance metrics. \n",
    "\n",
    "\n",
    "<b>We will follow the same pattern we used before, only this time we are explicitly defining two objects ``X`` and ``y``, which were defined implicitly when we built the first model</b>. \n",
    "\n",
    "    \n",
    "Thus, pattern defined above can be expanded as follows:\n",
    "\n",
    "> (a) Define ``X`` and ``y``  \n",
    "\n",
    "> (b) Perform train/test split on ``(X, y)``  \n",
    "\n",
    "> (c) Create an object of the class associated with the algorithm to be used--in this case ``LogisticRegression``  \n",
    "\n",
    "> (d) Build an actual model using the``fit`` method from the class associated with the algorithm \n",
    "to be used (using the training set)  \n",
    "\n",
    "> (e) Predict with the built model using the``predict`` method from the class (training set and test set)  \n",
    "\n",
    "> (f) Compute performance metrics (in this case, accuracy) for the training and test predictions. The metrics to be used and their interpretation will depend on the application at hand  \n",
    "\n",
    "> (g) Determine if the model can be improved--repeat as needed with additional algorithms and/or by applying hyper-parameter tuning  \n",
    "\n",
    "> (h) Compare and Combine all best models as needed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (a) Define ``X`` and ``y``  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "X contains the independent variables--a.k.a. features, but not the target. X is usually referred to as the \"Design Matrix\", in this case it will be represented as a data frame.\n",
    "\n",
    "The following is a very convenient way to express this using Pandas--indeed, the .drop(...), means \"remove the column 'heart_disease' ...\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X:  <class 'pandas.core.frame.DataFrame'> (270, 23)\n"
     ]
    }
   ],
   "source": [
    "X = dflog.drop(columns = ['heart_disease'])\n",
    "print(\"X: \", type(X), X.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that ``X`` is a ``pandas`` DataFrame with 270 rows and 23 columns (a.k.a. a matrix)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remember that the form of data we will use always is\n",
    "\n",
    "<img src=\"images/dataform.jpg\" alt=\"data form\" style=\"width: 600px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "y is the dependent variable, sometimes known as the response, target, or labels. In this case, it is the presence or absence of heart disease."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y:  <class 'pandas.core.series.Series'> (270,)\n"
     ]
    }
   ],
   "source": [
    "y = dflog['heart_disease']\n",
    "print(\"y: \", type(y), y.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "notice that, by construction, y will have value True (1) in positions where  the value for the heart_disease column of the dataframe is 1, otherwise it will be False (0)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So the \"response\" $y$ is a plain array of 0s and 1s for binary classification. \n",
    "\n",
    "`y = [1,1,0,0,0,1,0,1,0....]`.\n",
    "\n",
    "Sometimes we will also see -1 and +1 instead. There are also *multiclass* classifiers that can assign an observation to one of $K > 2$ classes and the labe may then be an integer, but we will not be discussing those here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exactly as expected, $y$, is a pandas Series, aka a vector of 270 components. Moreover, we invite you to check that the following relationship holds between $X$ and $y$:\n",
    "\n",
    "1. They have the same number of rows\n",
    "2. For a given row $i$ of matrix $X$, the label that corresponds to that data point is exactly the value of vector $y$ at that row\n",
    "3. The number of rows of $X$ is the number of data points in the dataset\n",
    "4. The number of columns of $X$ is the number of features of each data point in the dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and ... we can check that the columns contain all the features but not the target in this case, we can do it visually, but think about how to do it in Python, for cases were the number of columns is too large to check visually:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['age_yr',\n",
       " 'resting_BP_mm_Hg',\n",
       " 'cholesterol_mg_dl',\n",
       " 'fasting_blood_sugar_high',\n",
       " 'max_HR',\n",
       " 'exercise_angina',\n",
       " 'ST_depresssion_exercise',\n",
       " 'number_vessels_involved',\n",
       " 'sex_M_F_0',\n",
       " 'sex_M_F_1',\n",
       " 'chest_pain_value_1',\n",
       " 'chest_pain_value_2',\n",
       " 'chest_pain_value_3',\n",
       " 'chest_pain_value_4',\n",
       " 'ECG_value_0',\n",
       " 'ECG_value_1',\n",
       " 'ECG_value_2',\n",
       " 'ST_slope_peak_1',\n",
       " 'ST_slope_peak_2',\n",
       " 'ST_slope_peak_3',\n",
       " 'defect_diag_3',\n",
       " 'defect_diag_6',\n",
       " 'defect_diag_7']"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(X.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***All classification problems can be represented, as shown above, with a matrix $X$ and a vector  $y$, satisfying the conditions 1-4 above***. When the number of unique values of $y$ is 2, the problem is called a binary classification problem. When this number is greater than 2, the problem is called a multi-class classification problem. In this Case Study we are dealing with the former."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (b) Perform train/test split on $(X, y)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training split has  202  rows\n",
      " and the corresponding labels have an equal number of values. (202)\n",
      "Test split has  68  rows\n",
      " and the corresponding labels have an equal number of values. (68)\n"
     ]
    }
   ],
   "source": [
    "Xlr, Xtestlr, ylr, ytestlr = train_test_split(X, y, random_state = 2)\n",
    "print('Training split has ', Xlr.shape[0], ' rows\\n',\n",
    "      'and the corresponding labels have an equal number of values.', \n",
    "      '(' + str(len(ylr))+ ')')\n",
    "print('Test split has ', Xtestlr.shape[0], ' rows\\n',\n",
    "      'and the corresponding labels have an equal number of values.', \n",
    "      '(' + str(len(ytestlr)) + ')')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We notice the following:\n",
    "\n",
    "- This time we did not include the split parameter in the call to ``train_test_split``, and thus it computed a 75% / 25% split of the data as we verified above. This is the deafult split as per the documentation of this method (*).\n",
    "\n",
    "\n",
    "- We used a different value for ``random_state`` to indicate that if we were to call ``train_test_split`` with the same arguments ``X`` and ``y``, the function would return the same split as the first time--which would be useful in cases where identical splits need to be used. Notice that this is not guaranteed to happen across notebooks; but if this were the case, we could persist the split (that is, saving it to the local storage--e.g., hard disk) ``Xlr, Xtestlr, ylr, ytestlr`` (e.g., using Pickle or other methods (+)).\n",
    "\n",
    "\n",
    "- When we built our first model, we talked about the importance of exploring the proportion among the classes in terms of their sizes, but we did not talk about what could happen to that proportion after the train/test split is executed. In our case, we saw before that the proportion between classes ``0`` (no heart disease), and ``1`` (heart disease) is about 56% for class ``0``, and 44% for class ``1``--and thus, this is a slightly imbalanced classification problem, where class ``1`` is the minority class. So, it makes sense to ask whether this proportion is preserved in ``ylr, ytestlr``.\n",
    "\n",
    "\n",
    "The code below investigates this question. \n",
    "\n",
    "---\n",
    "\n",
    "\n",
    "(*) [sklearn.model_selection.train_test_split](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)\n",
    "\n",
    "(+) [docs.python.org pickle](https://docs.python.org/3/library/pickle.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we define a function to plot the class ratios between two splits of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def plot_y_ratios(y, ytest):\n",
    "    fig, ax = plt.subplots(2, sharex = True)\n",
    "    ax[0].bar(x = [0, 1], height = [y[y == 0].count(), \n",
    "                                    y[y == 1].count()])\n",
    "    ax[0].set_ylabel('train', fontsize = 8)\n",
    "    ax[0].set_ylim(0, 125)\n",
    "    ax[1].bar(x = [0, 1], height = [ytest[ytest == 0].count(),\n",
    "                                    ytest[ytest == 1].count()])\n",
    "    ax[1].set_ylabel('test', fontsize = 8)\n",
    "    ax[1].set_ylim(0, 125)\n",
    "    ax[1].set_xticks([0, 1])\n",
    "    ax[0].tick_params(which = 'both', labelsize = 8)\n",
    "    ax[1].tick_params(which = 'both', labelsize = 8)\n",
    "    ax[1].set_xlabel('heart disease\\n(0 = no disease)', fontsize = 8)\n",
    "    ax[0].set_title('% heart disease (where 1 means presence of heart diseases):\\n' +\n",
    "                    'train: ' + str(round(100 * (y[y ==1].count()/y.shape[0]), 0)) +\n",
    "                    '\\ntest: ' + str(round(100 * (ytest[ytest ==1].count()/ytest.shape[0]), 0)),\n",
    "                   fontsize = 10)\n",
    "    plt.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can inpsect the train response data (ylr) compared to the test response data (ytestlr)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_y_ratios(ylr, ytestlr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that ```ytestlr``` has a lower percentage of heart disease (38%), compared to the percentage in the original dataset (44%). Thus, the way we used train/test split made the imbalance (however mild) a little worse. As discussed before, we would like to perform a split preserving the original proportions among the classes, so we do not have to worry about the possibility of getting poor results due to this fact.\n",
    "\n",
    "It turns out that ```train_test_split``` provides a way to compute splits that try to preserve (as much as it might be possible) the proportions among the classes in the original dataset. More specifically, the *stratify* parameter takes an *array-like* object that describes all the classes (*). Thus, we can use the target as this parameter. Below we specify to stratify according to ``y``, and then inspect the resulting split. Notice that this method works for multiple classes as well (i.e., number of classes greater than 2).\n",
    "\n",
    "---\n",
    "(*) [sklearn.model_selection.train_test_split](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Xlrstrat, Xtestlrstrat, ylrstrat, ytestlrstrat = train_test_split(X, y, \n",
    "                                                                  random_state = 2, \n",
    "                                                                  stratify = y)\n",
    "plot_y_ratios(ylrstrat, ytestlrstrat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nearly perfect!  As noted earlier, in a more complete project you should do EDA on the X-variables as well, and consider if the distributions there are of a concern, before moving on to modeling. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> To recap ... </b>, the binary classification problem has been represented as:\n",
    "\n",
    "- A *design matrix* $X$, with as many rows as there are rows in the dataset, and\n",
    "as many columns as there are features in the dataset\n",
    "\n",
    "\n",
    "- A *target vector* $y$, with as many elements as there are rows in the dataset, and it is\n",
    "such that the i-th value of $y$ is the value of the target associated with \n",
    "row i of $X$.\n",
    "\n",
    "A very important fact to consider is this:\n",
    "\n",
    "*Any <b>supervised</b> problem can be represented by a pair $(X, y)$, where $X$ is a\n",
    "design matrix, and $y$ is a target vector*.\n",
    "\n",
    "- The values in $y$ may be *imbalanced*, and in general it's good practice to ensure the data splits have similar distributions of the target.\n",
    "\n",
    "Morevover: \n",
    "\n",
    "- When the target vector takes non-categorical values, ``(X, y)`` represents a *<b>regression</b>* problem.\n",
    "\n",
    "- When the target vector takes categorical values, ``(X, y)`` represents a *<b>classification</b>* problem.\n",
    "\n",
    "$Note$: there are *unsupervised* problems which are represented by a design matrix $X$ but there is no corresponding $y$. We don't further address *unsupervised* problems in this Case Study."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are ready to continue building a model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (c) Create an object of the class associated with the algorithm to be used--in this case LogisticRegression\n",
    "\n",
    "Construct the LogisticRegression object, setting some basic parameters (more on this later). See (*) for more details, and discuss with your mentor the meaning of each parameter, and the implications associated with using default values\n",
    "\n",
    "---\n",
    " (*) [sklearn.linear_model.LogisticRegression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = LogisticRegression(solver = 'newton-cg', max_iter = 500)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (d) Build an actual model using the ``fit `` method from the class associated with the algorithm to be used (using the training set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=500, solver=&#x27;newton-cg&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=500, solver=&#x27;newton-cg&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(max_iter=500, solver='newton-cg')"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.fit(Xlrstrat, ylrstrat) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (e) Predict with the built model using the ``predict`` method from the class (training set and test set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predict_test = clf.predict(Xtestlrstrat)\n",
    "y_predict_training = clf.predict(Xlrstrat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (f) Compute performance metrics (in this case, accuracy) for the training and test predictions. In general, the metrics to be used and their interpretation will depend on the application at hand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Test] Accuracy score (y_predict_test, ytestlrstrat): 0.81\n"
     ]
    }
   ],
   "source": [
    "print(\"[Test] Accuracy score (y_predict_test, ytestlrstrat):\",\n",
    "      f'{accuracy_score(y_predict_test, ytestlrstrat):.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note the order in which the parameters should be passed according to the documentation ... although in this case there is no difference since it is a one-to-one comparison\n",
    "\n",
    "ref: [sklearn.metrics.accuracy_score](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html)\n",
    "\n",
    "Re-compute with switched order to confirm what we expect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Test] Accuracy score: (ytestlrstrat, y_predict_test) [**note reversed order] 0.81\n"
     ]
    }
   ],
   "source": [
    "print(\"[Test] Accuracy score: (ytestlrstrat, y_predict_test) [**note reversed order]\", \n",
    "      f'{accuracy_score(ytestlrstrat, y_predict_test):.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And compute the metric on the training data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Training] Accuracy score: (ylrstrat, y_predict_training) 0.89\n"
     ]
    }
   ],
   "source": [
    "print(\"[Training] Accuracy score: (ylrstrat, y_predict_training)\", \n",
    "      f'{accuracy_score(ylrstrat, y_predict_training):.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (g) Determine if the model can be improved--repeat as needed with additional algorithms and/or by applying hyper-parameter tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is common practice to show--when applicable--performance metrics for both the training set and the test set. This means that the model is fitted with the training set, and once fitted, predictions are generated using the training set and the test set, and the corresponding performance metrics are shown (as above), and analyzed. \n",
    "\n",
    "\n",
    "*NOTE*: you might want to discuss with your mentor examples of cases when this comparison would *not* be applicable. \n",
    "\n",
    "\n",
    "*Hint*: consider tree-based algorithms such as Random Forest Classifiers. (*)\n",
    "\n",
    "Since the model's **training accuracy** (``0.89``) is pretty good (meaning, close to 1--or 100%), then one says there is only a small \"bias\" in the model.\n",
    "\n",
    "Since the model's **test accuracy** (``0.81``) is decently close to the training accuracy, we would say that there is a small \"variance\" between the training accuracy and the test accuracy. This is an indication that the model will \"generalize well\", which means that the model will be well-behaved when new data is presented to it.\n",
    "\n",
    "Since the gap between training and testing accuracy is about 8%, one might say that the model is slightly over-fitting the data. Thus, in general, one says that a model is *over-fitting* (or just overfitting), when there is an important gap between its training performance and its test performance.\n",
    "\n",
    "Notice two points of nuance in the definition of overfitting: (a) the quantification of *important* depends on the application; and (b) the comparison of training versus test performance can be done (in many cases) across mulriple performance metrics \n",
    "\n",
    "These properties are important and desirable.\n",
    "\n",
    "In this particular case study, however, there are two possible avenues that we might want to investigate:\n",
    "\n",
    "\n",
    "- Whether the mild imbalance in the dataset might be affecting the algorithm (and thus the model computed with it.)\n",
    "\n",
    "\n",
    "- Whether the observed mild overfitting can be diminished\n",
    "\n",
    "\n",
    "Below we explore the second bullet. Feel free to consult with your mentor for resources associated with exploring the first bullet.\n",
    "\n",
    "---\n",
    "(*) [sklearn.ensemble.RandomForestClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Side-Bar: NEVER EVER use just Accuracy to Measure the Performance of a Classification Algorithm!\n",
    "\n",
    "Note however that focusing only on accuracy is not a good practice since in some cases it can be misleading. In particular, if the dataset is highly imbalanced (as defined before), then accuracy becomes a poor indicator of model performance.  For example, suppose we were given a data sample of 1000 instances, and 900 of them were class ``1``, and 100 were class ``0``.  \n",
    "\n",
    "If we defined a model that always predicts class ``1``, such model would have 90% accuracy! But we would be mis-classifying 100% of the class 0 samples--although 10% of the time, with respect to the whole dataset.  \n",
    "\n",
    "A good way to avoid this trap is by always generating a confusion matrix for a classification result.  The confusion matrix is simply a table with the true class labels on one axis, and the predicted labels on the other axis.  The counts for each combination of true vs. predicted are put in each cell of the table.  For our hypothetical case, the confusion matrix is:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src = \"images/Confusion_Matrix.jpg\" alt = \"confusion matrix\" style=\"width: 400px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the diagonal intersections of the classes are the \"correct\" predictions (i.e. Predicted 0 intersection wiht Actual 0, and Predicted 1 intersection with Actual 1), and in this case since the model never predicts 0, there are no \"correct\" predictions for that case. It is easy to see that the model isn't working well, even thought the accuracy score would be 90%.  The confusion matrix in this case provides much more information in an easy-to-interpret format.  ``sklearn`` provides the ``confusion_matrix`` and ``ConfusionMatrixDisplay`` methods to generate the results for us.  Here we apply them to the previous model results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x18a0f3f9f10>"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(ytestlrstrat, y_predict_test, labels = clf.classes_)\n",
    "_, ax = plt.subplots()\n",
    "display_cm = ConfusionMatrixDisplay(confusion_matrix = cm, \n",
    "                                    display_labels = ['no heart disease', 'heart disease'])\n",
    "ax.set_xticks([0, 1])\n",
    "ax.set_yticks([0, 1])\n",
    "ax.set_xticklabels(labels = ['no heart disease', 'heart disease'], fontsize = 8)\n",
    "ax.set_yticklabels(labels = ['no heart disease', 'heart disease'], fontsize = 8)\n",
    "display_cm.plot(ax = ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note the ability to add human readable labels (as compared to just 0 or 1). From the chart we can see that while the overall accuracy was 81%, when we predict heart disease, 20% (6 of 29) of the time we are predicting a false positive, while the false negatives (predicting no disease when in fact there is heart disease) is about 18% (7 of 39). This information can be discussed with stakeholders to decide which is more important, reducing false positives or false negatives, assuming overall accuracy is acceptable. We can also use the ``classification_report`` method from earlier on this case--and notice that all the metrics in the report (precision, recall, and f1-score) can be computed from the values in the confusion matrix:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.90       112\n",
      "           1       0.90      0.84      0.87        90\n",
      "\n",
      "    accuracy                           0.89       202\n",
      "   macro avg       0.89      0.89      0.89       202\n",
      "weighted avg       0.89      0.89      0.89       202\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(ylrstrat, y_predict_training))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.84      0.83        38\n",
      "           1       0.79      0.77      0.78        30\n",
      "\n",
      "    accuracy                           0.81        68\n",
      "   macro avg       0.81      0.80      0.81        68\n",
      "weighted avg       0.81      0.81      0.81        68\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(ytestlrstrat, y_predict_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When the training accuracy is good, the test accuracy is somewhat worse than the training result. In such a case, as we introduced earlier, the model is slightly \"overfitting\" the training set. When there is evidence of overfitting, one must analyze the situation and suggest the course of action, typically aimed at \"relaxing\" the model--i.e., making it less strict.  This can seem counterintuitive at first!\n",
    "\n",
    "Typically, the test accuracy, even when it is close to the training accuracy, tends to be smaller (worse) than the training accuracy (better).\n",
    "\n",
    "When the test accuracy is significally better than the training accuracy, this would justify a review of the code to see if there is a bug. In such a case, plotting the performance results with multiple (random) splits of the same data would be one way to start investigating.\n",
    "\n",
    "The code below shows one simple way to do it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#\n",
    "# here we try multiple splits and see the effects, with the same proportion 75% train and 25% test\n",
    "#\n",
    "# keep lists for training accuracy, \n",
    "#                test accuracy, \n",
    "#                and the difference between the latter and the former\n",
    "#\n",
    "training_accuracy = []\n",
    "test_accuracy = []\n",
    "accuracy_difference = []\n",
    "#\n",
    "# define number of trials\n",
    "#\n",
    "n_splits = 25\n",
    "#\n",
    "# define LogisticRegression object\n",
    "#\n",
    "clf = LogisticRegression(solver = 'newton-cg', max_iter = 500)\n",
    "#\n",
    "# loop over multiple trials\n",
    "#\n",
    "for i in range(0, n_splits):\n",
    "#\n",
    "# perform a split for this iteration, \n",
    "# using different random_state for every iteration\n",
    "# this ensures each split is likely to be unique\n",
    "#\n",
    "    Xlr, Xtestlr, ylr, ytestlr = train_test_split(X, y, stratify = y, random_state = i)\n",
    "#    \n",
    "# fit the Classifier on the training set\n",
    "#\n",
    "    clf.fit(Xlr, ylr)\n",
    "#\n",
    "# predict the labels for the training data\n",
    "#\n",
    "    y_predict_training = clf.predict(Xlr)\n",
    "#\n",
    "# predict the labels for the test data\n",
    "#\n",
    "    y_predict_test = clf.predict(Xtestlr)\n",
    "#\n",
    "# save training set accuracy for this split\n",
    "#\n",
    "    tr_accuracy = accuracy_score(y_predict_training, ylr)\n",
    "    training_accuracy.append(tr_accuracy)\n",
    "#\n",
    "# save test set accuracy for this split\n",
    "#\n",
    "    tst_accuracy = accuracy_score(y_predict_test, ytestlr)\n",
    "    test_accuracy.append(tst_accuracy)\n",
    "#\n",
    "# save difference between the two acuracy values\n",
    "#\n",
    "    accuracy_difference.append(tst_accuracy - tr_accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above code generates 25 unique experiments varying the train-test split indices within the original data.  Now we plot all the trials for both the training and test data, to compare the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(range(len(training_accuracy)),\n",
    "           training_accuracy, \n",
    "           color = 'blue', \n",
    "           alpha = 0.5,\n",
    "           label = 'Train data results')\n",
    "ax.plot(range(len(training_accuracy)),\n",
    "        training_accuracy, \n",
    "        color = 'blue', \n",
    "        linestyle = '-.',\n",
    "        linewidth = 0.5)\n",
    "ax.scatter(range(len(test_accuracy)),\n",
    "           test_accuracy, \n",
    "           color = 'red', \n",
    "           alpha = 0.35, \n",
    "           label = 'Test data results')\n",
    "ax.plot(range(len(test_accuracy)),\n",
    "        test_accuracy, \n",
    "        color = 'red', \n",
    "        linestyle = '-.',\n",
    "        linewidth = 0.5)\n",
    "ax.legend(fontsize = 8, loc = \"lower right\")\n",
    "ax.set_ylabel('Training vs Test Accuracy')\n",
    "ax.set_ylim(0, 1)\n",
    "ax.set_xlabel('trial number')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the accuracy on the train split is relatively constant. This is generally expected since the model is given the train data to fit. On the other hand, the test results vary somewhat more. Another way to look at these results is to plot the difference between the test accuracy and the train accuracy, which is done here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(range(len(accuracy_difference)),\n",
    "           accuracy_difference, \n",
    "           color = 'green', \n",
    "           label = 'Difference in Accuracy [test - train]')\n",
    "ax.plot([0, len(accuracy_difference)], [0, 0], 'red')\n",
    "ax.legend(fontsize = 6)\n",
    "ax.set_ylabel('Test/Training Accuracy Difference')\n",
    "ax.set_ylim(-0.25, 0.25)\n",
    "ax.set_xlabel('trial number')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, the test accuracy is sometimes better, but not by very much--a maximum difference of no more than 0.15 units.  We've already noted that accuracy isn't always a good measure of model performance, and shown the use of the confusion matrix. Additional performance measures are provided by sklearn in the ``classifcation_report`` method (ref: [sklearn.metrics.classification_report](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html), including ``precision``, ``recall``, and ``f1-score``.  Note that if desired, we could graph multiple classification performance metrics similarly to the accuracy difference plot above. We won't do a deep dive on metrics here, but below we use the ``classification_report`` method to demonstrate the additional metrics. Note that since we didn't store the intermediate models, the following outputs results from the last of the 25 trials performed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Training Classification Report]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.91      0.89       112\n",
      "           1       0.88      0.84      0.86        90\n",
      "\n",
      "    accuracy                           0.88       202\n",
      "   macro avg       0.88      0.88      0.88       202\n",
      "weighted avg       0.88      0.88      0.88       202\n",
      "\n",
      "[Test Classification Report]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.95      0.90        38\n",
      "           1       0.92      0.80      0.86        30\n",
      "\n",
      "    accuracy                           0.88        68\n",
      "   macro avg       0.89      0.87      0.88        68\n",
      "weighted avg       0.89      0.88      0.88        68\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"[Training Classification Report]\")\n",
    "print(classification_report(ylr, y_predict_training))\n",
    "#\n",
    "print(\"[Test Classification Report]\")\n",
    "print(classification_report(ytestlr, y_predict_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the more detailed classification report, we see that the metrics are similar for the training and test sets. If you look back at the two plots, you will notice the last points for train and test are more or less on top of each other. The [ISLR book](http://www-bcf.usc.edu/~gareth/ISL/) has explanations of the meaning of these performance metrics, and the Wikipedia entries for them are also quite good (see [Precision and Recall](https://en.wikipedia.org/wiki/Precision_and_recall))."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression Parameters in scikit-learn\n",
    "\n",
    "It's a good habit to get into to use help(object) in Python to see details of the object.  If the object is a class from a large package like scikit-learn, you generally will get a version of the documentation similar to what you might find searching the web. By using help(), you are sure to get the information for the exact version you are using.  Here, use help(LogisticRegression) to get information about this class from scikit-learn."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on class LogisticRegression in module sklearn.linear_model._logistic:\n",
      "\n",
      "class LogisticRegression(sklearn.linear_model._base.LinearClassifierMixin, sklearn.linear_model._base.SparseCoefMixin, sklearn.base.BaseEstimator)\n",
      " |  LogisticRegression(penalty='l2', *, dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver='lbfgs', max_iter=100, multi_class='auto', verbose=0, warm_start=False, n_jobs=None, l1_ratio=None)\n",
      " |  \n",
      " |  Logistic Regression (aka logit, MaxEnt) classifier.\n",
      " |  \n",
      " |  In the multiclass case, the training algorithm uses the one-vs-rest (OvR)\n",
      " |  scheme if the 'multi_class' option is set to 'ovr', and uses the\n",
      " |  cross-entropy loss if the 'multi_class' option is set to 'multinomial'.\n",
      " |  (Currently the 'multinomial' option is supported only by the 'lbfgs',\n",
      " |  'sag', 'saga' and 'newton-cg' solvers.)\n",
      " |  \n",
      " |  This class implements regularized logistic regression using the\n",
      " |  'liblinear' library, 'newton-cg', 'sag', 'saga' and 'lbfgs' solvers. **Note\n",
      " |  that regularization is applied by default**. It can handle both dense\n",
      " |  and sparse input. Use C-ordered arrays or CSR matrices containing 64-bit\n",
      " |  floats for optimal performance; any other input format will be converted\n",
      " |  (and copied).\n",
      " |  \n",
      " |  The 'newton-cg', 'sag', and 'lbfgs' solvers support only L2 regularization\n",
      " |  with primal formulation, or no regularization. The 'liblinear' solver\n",
      " |  supports both L1 and L2 regularization, with a dual formulation only for\n",
      " |  the L2 penalty. The Elastic-Net regularization is only supported by the\n",
      " |  'saga' solver.\n",
      " |  \n",
      " |  Read more in the :ref:`User Guide <logistic_regression>`.\n",
      " |  \n",
      " |  Parameters\n",
      " |  ----------\n",
      " |  penalty : {'l1', 'l2', 'elasticnet', None}, default='l2'\n",
      " |      Specify the norm of the penalty:\n",
      " |  \n",
      " |      - `None`: no penalty is added;\n",
      " |      - `'l2'`: add a L2 penalty term and it is the default choice;\n",
      " |      - `'l1'`: add a L1 penalty term;\n",
      " |      - `'elasticnet'`: both L1 and L2 penalty terms are added.\n",
      " |  \n",
      " |      .. warning::\n",
      " |         Some penalties may not work with some solvers. See the parameter\n",
      " |         `solver` below, to know the compatibility between the penalty and\n",
      " |         solver.\n",
      " |  \n",
      " |      .. versionadded:: 0.19\n",
      " |         l1 penalty with SAGA solver (allowing 'multinomial' + L1)\n",
      " |  \n",
      " |      .. deprecated:: 1.2\n",
      " |         The 'none' option was deprecated in version 1.2, and will be removed\n",
      " |         in 1.4. Use `None` instead.\n",
      " |  \n",
      " |  dual : bool, default=False\n",
      " |      Dual or primal formulation. Dual formulation is only implemented for\n",
      " |      l2 penalty with liblinear solver. Prefer dual=False when\n",
      " |      n_samples > n_features.\n",
      " |  \n",
      " |  tol : float, default=1e-4\n",
      " |      Tolerance for stopping criteria.\n",
      " |  \n",
      " |  C : float, default=1.0\n",
      " |      Inverse of regularization strength; must be a positive float.\n",
      " |      Like in support vector machines, smaller values specify stronger\n",
      " |      regularization.\n",
      " |  \n",
      " |  fit_intercept : bool, default=True\n",
      " |      Specifies if a constant (a.k.a. bias or intercept) should be\n",
      " |      added to the decision function.\n",
      " |  \n",
      " |  intercept_scaling : float, default=1\n",
      " |      Useful only when the solver 'liblinear' is used\n",
      " |      and self.fit_intercept is set to True. In this case, x becomes\n",
      " |      [x, self.intercept_scaling],\n",
      " |      i.e. a \"synthetic\" feature with constant value equal to\n",
      " |      intercept_scaling is appended to the instance vector.\n",
      " |      The intercept becomes ``intercept_scaling * synthetic_feature_weight``.\n",
      " |  \n",
      " |      Note! the synthetic feature weight is subject to l1/l2 regularization\n",
      " |      as all other features.\n",
      " |      To lessen the effect of regularization on synthetic feature weight\n",
      " |      (and therefore on the intercept) intercept_scaling has to be increased.\n",
      " |  \n",
      " |  class_weight : dict or 'balanced', default=None\n",
      " |      Weights associated with classes in the form ``{class_label: weight}``.\n",
      " |      If not given, all classes are supposed to have weight one.\n",
      " |  \n",
      " |      The \"balanced\" mode uses the values of y to automatically adjust\n",
      " |      weights inversely proportional to class frequencies in the input data\n",
      " |      as ``n_samples / (n_classes * np.bincount(y))``.\n",
      " |  \n",
      " |      Note that these weights will be multiplied with sample_weight (passed\n",
      " |      through the fit method) if sample_weight is specified.\n",
      " |  \n",
      " |      .. versionadded:: 0.17\n",
      " |         *class_weight='balanced'*\n",
      " |  \n",
      " |  random_state : int, RandomState instance, default=None\n",
      " |      Used when ``solver`` == 'sag', 'saga' or 'liblinear' to shuffle the\n",
      " |      data. See :term:`Glossary <random_state>` for details.\n",
      " |  \n",
      " |  solver : {'lbfgs', 'liblinear', 'newton-cg', 'newton-cholesky', 'sag', 'saga'},             default='lbfgs'\n",
      " |  \n",
      " |      Algorithm to use in the optimization problem. Default is 'lbfgs'.\n",
      " |      To choose a solver, you might want to consider the following aspects:\n",
      " |  \n",
      " |          - For small datasets, 'liblinear' is a good choice, whereas 'sag'\n",
      " |            and 'saga' are faster for large ones;\n",
      " |          - For multiclass problems, only 'newton-cg', 'sag', 'saga' and\n",
      " |            'lbfgs' handle multinomial loss;\n",
      " |          - 'liblinear' is limited to one-versus-rest schemes.\n",
      " |          - 'newton-cholesky' is a good choice for `n_samples` >> `n_features`,\n",
      " |            especially with one-hot encoded categorical features with rare\n",
      " |            categories. Note that it is limited to binary classification and the\n",
      " |            one-versus-rest reduction for multiclass classification. Be aware that\n",
      " |            the memory usage of this solver has a quadratic dependency on\n",
      " |            `n_features` because it explicitly computes the Hessian matrix.\n",
      " |  \n",
      " |      .. warning::\n",
      " |         The choice of the algorithm depends on the penalty chosen.\n",
      " |         Supported penalties by solver:\n",
      " |  \n",
      " |         - 'lbfgs'           -   ['l2', None]\n",
      " |         - 'liblinear'       -   ['l1', 'l2']\n",
      " |         - 'newton-cg'       -   ['l2', None]\n",
      " |         - 'newton-cholesky' -   ['l2', None]\n",
      " |         - 'sag'             -   ['l2', None]\n",
      " |         - 'saga'            -   ['elasticnet', 'l1', 'l2', None]\n",
      " |  \n",
      " |      .. note::\n",
      " |         'sag' and 'saga' fast convergence is only guaranteed on features\n",
      " |         with approximately the same scale. You can preprocess the data with\n",
      " |         a scaler from :mod:`sklearn.preprocessing`.\n",
      " |  \n",
      " |      .. seealso::\n",
      " |         Refer to the User Guide for more information regarding\n",
      " |         :class:`LogisticRegression` and more specifically the\n",
      " |         :ref:`Table <Logistic_regression>`\n",
      " |         summarizing solver/penalty supports.\n",
      " |  \n",
      " |      .. versionadded:: 0.17\n",
      " |         Stochastic Average Gradient descent solver.\n",
      " |      .. versionadded:: 0.19\n",
      " |         SAGA solver.\n",
      " |      .. versionchanged:: 0.22\n",
      " |          The default solver changed from 'liblinear' to 'lbfgs' in 0.22.\n",
      " |      .. versionadded:: 1.2\n",
      " |         newton-cholesky solver.\n",
      " |  \n",
      " |  max_iter : int, default=100\n",
      " |      Maximum number of iterations taken for the solvers to converge.\n",
      " |  \n",
      " |  multi_class : {'auto', 'ovr', 'multinomial'}, default='auto'\n",
      " |      If the option chosen is 'ovr', then a binary problem is fit for each\n",
      " |      label. For 'multinomial' the loss minimised is the multinomial loss fit\n",
      " |      across the entire probability distribution, *even when the data is\n",
      " |      binary*. 'multinomial' is unavailable when solver='liblinear'.\n",
      " |      'auto' selects 'ovr' if the data is binary, or if solver='liblinear',\n",
      " |      and otherwise selects 'multinomial'.\n",
      " |  \n",
      " |      .. versionadded:: 0.18\n",
      " |         Stochastic Average Gradient descent solver for 'multinomial' case.\n",
      " |      .. versionchanged:: 0.22\n",
      " |          Default changed from 'ovr' to 'auto' in 0.22.\n",
      " |  \n",
      " |  verbose : int, default=0\n",
      " |      For the liblinear and lbfgs solvers set verbose to any positive\n",
      " |      number for verbosity.\n",
      " |  \n",
      " |  warm_start : bool, default=False\n",
      " |      When set to True, reuse the solution of the previous call to fit as\n",
      " |      initialization, otherwise, just erase the previous solution.\n",
      " |      Useless for liblinear solver. See :term:`the Glossary <warm_start>`.\n",
      " |  \n",
      " |      .. versionadded:: 0.17\n",
      " |         *warm_start* to support *lbfgs*, *newton-cg*, *sag*, *saga* solvers.\n",
      " |  \n",
      " |  n_jobs : int, default=None\n",
      " |      Number of CPU cores used when parallelizing over classes if\n",
      " |      multi_class='ovr'\". This parameter is ignored when the ``solver`` is\n",
      " |      set to 'liblinear' regardless of whether 'multi_class' is specified or\n",
      " |      not. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`\n",
      " |      context. ``-1`` means using all processors.\n",
      " |      See :term:`Glossary <n_jobs>` for more details.\n",
      " |  \n",
      " |  l1_ratio : float, default=None\n",
      " |      The Elastic-Net mixing parameter, with ``0 <= l1_ratio <= 1``. Only\n",
      " |      used if ``penalty='elasticnet'``. Setting ``l1_ratio=0`` is equivalent\n",
      " |      to using ``penalty='l2'``, while setting ``l1_ratio=1`` is equivalent\n",
      " |      to using ``penalty='l1'``. For ``0 < l1_ratio <1``, the penalty is a\n",
      " |      combination of L1 and L2.\n",
      " |  \n",
      " |  Attributes\n",
      " |  ----------\n",
      " |  \n",
      " |  classes_ : ndarray of shape (n_classes, )\n",
      " |      A list of class labels known to the classifier.\n",
      " |  \n",
      " |  coef_ : ndarray of shape (1, n_features) or (n_classes, n_features)\n",
      " |      Coefficient of the features in the decision function.\n",
      " |  \n",
      " |      `coef_` is of shape (1, n_features) when the given problem is binary.\n",
      " |      In particular, when `multi_class='multinomial'`, `coef_` corresponds\n",
      " |      to outcome 1 (True) and `-coef_` corresponds to outcome 0 (False).\n",
      " |  \n",
      " |  intercept_ : ndarray of shape (1,) or (n_classes,)\n",
      " |      Intercept (a.k.a. bias) added to the decision function.\n",
      " |  \n",
      " |      If `fit_intercept` is set to False, the intercept is set to zero.\n",
      " |      `intercept_` is of shape (1,) when the given problem is binary.\n",
      " |      In particular, when `multi_class='multinomial'`, `intercept_`\n",
      " |      corresponds to outcome 1 (True) and `-intercept_` corresponds to\n",
      " |      outcome 0 (False).\n",
      " |  \n",
      " |  n_features_in_ : int\n",
      " |      Number of features seen during :term:`fit`.\n",
      " |  \n",
      " |      .. versionadded:: 0.24\n",
      " |  \n",
      " |  feature_names_in_ : ndarray of shape (`n_features_in_`,)\n",
      " |      Names of features seen during :term:`fit`. Defined only when `X`\n",
      " |      has feature names that are all strings.\n",
      " |  \n",
      " |      .. versionadded:: 1.0\n",
      " |  \n",
      " |  n_iter_ : ndarray of shape (n_classes,) or (1, )\n",
      " |      Actual number of iterations for all classes. If binary or multinomial,\n",
      " |      it returns only 1 element. For liblinear solver, only the maximum\n",
      " |      number of iteration across all classes is given.\n",
      " |  \n",
      " |      .. versionchanged:: 0.20\n",
      " |  \n",
      " |          In SciPy <= 1.0.0 the number of lbfgs iterations may exceed\n",
      " |          ``max_iter``. ``n_iter_`` will now report at most ``max_iter``.\n",
      " |  \n",
      " |  See Also\n",
      " |  --------\n",
      " |  SGDClassifier : Incrementally trained logistic regression (when given\n",
      " |      the parameter ``loss=\"log\"``).\n",
      " |  LogisticRegressionCV : Logistic regression with built-in cross validation.\n",
      " |  \n",
      " |  Notes\n",
      " |  -----\n",
      " |  The underlying C implementation uses a random number generator to\n",
      " |  select features when fitting the model. It is thus not uncommon,\n",
      " |  to have slightly different results for the same input data. If\n",
      " |  that happens, try with a smaller tol parameter.\n",
      " |  \n",
      " |  Predict output may not match that of standalone liblinear in certain\n",
      " |  cases. See :ref:`differences from liblinear <liblinear_differences>`\n",
      " |  in the narrative documentation.\n",
      " |  \n",
      " |  References\n",
      " |  ----------\n",
      " |  \n",
      " |  L-BFGS-B -- Software for Large-scale Bound-constrained Optimization\n",
      " |      Ciyou Zhu, Richard Byrd, Jorge Nocedal and Jose Luis Morales.\n",
      " |      http://users.iems.northwestern.edu/~nocedal/lbfgsb.html\n",
      " |  \n",
      " |  LIBLINEAR -- A Library for Large Linear Classification\n",
      " |      https://www.csie.ntu.edu.tw/~cjlin/liblinear/\n",
      " |  \n",
      " |  SAG -- Mark Schmidt, Nicolas Le Roux, and Francis Bach\n",
      " |      Minimizing Finite Sums with the Stochastic Average Gradient\n",
      " |      https://hal.inria.fr/hal-00860051/document\n",
      " |  \n",
      " |  SAGA -- Defazio, A., Bach F. & Lacoste-Julien S. (2014).\n",
      " |          :arxiv:`\"SAGA: A Fast Incremental Gradient Method With Support\n",
      " |          for Non-Strongly Convex Composite Objectives\" <1407.0202>`\n",
      " |  \n",
      " |  Hsiang-Fu Yu, Fang-Lan Huang, Chih-Jen Lin (2011). Dual coordinate descent\n",
      " |      methods for logistic regression and maximum entropy models.\n",
      " |      Machine Learning 85(1-2):41-75.\n",
      " |      https://www.csie.ntu.edu.tw/~cjlin/papers/maxent_dual.pdf\n",
      " |  \n",
      " |  Examples\n",
      " |  --------\n",
      " |  >>> from sklearn.datasets import load_iris\n",
      " |  >>> from sklearn.linear_model import LogisticRegression\n",
      " |  >>> X, y = load_iris(return_X_y=True)\n",
      " |  >>> clf = LogisticRegression(random_state=0).fit(X, y)\n",
      " |  >>> clf.predict(X[:2, :])\n",
      " |  array([0, 0])\n",
      " |  >>> clf.predict_proba(X[:2, :])\n",
      " |  array([[9.8...e-01, 1.8...e-02, 1.4...e-08],\n",
      " |         [9.7...e-01, 2.8...e-02, ...e-08]])\n",
      " |  >>> clf.score(X, y)\n",
      " |  0.97...\n",
      " |  \n",
      " |  Method resolution order:\n",
      " |      LogisticRegression\n",
      " |      sklearn.linear_model._base.LinearClassifierMixin\n",
      " |      sklearn.base.ClassifierMixin\n",
      " |      sklearn.linear_model._base.SparseCoefMixin\n",
      " |      sklearn.base.BaseEstimator\n",
      " |      builtins.object\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __init__(self, penalty='l2', *, dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver='lbfgs', max_iter=100, multi_class='auto', verbose=0, warm_start=False, n_jobs=None, l1_ratio=None)\n",
      " |      Initialize self.  See help(type(self)) for accurate signature.\n",
      " |  \n",
      " |  fit(self, X, y, sample_weight=None)\n",
      " |      Fit the model according to the given training data.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      X : {array-like, sparse matrix} of shape (n_samples, n_features)\n",
      " |          Training vector, where `n_samples` is the number of samples and\n",
      " |          `n_features` is the number of features.\n",
      " |      \n",
      " |      y : array-like of shape (n_samples,)\n",
      " |          Target vector relative to X.\n",
      " |      \n",
      " |      sample_weight : array-like of shape (n_samples,) default=None\n",
      " |          Array of weights that are assigned to individual samples.\n",
      " |          If not provided, then each sample is given unit weight.\n",
      " |      \n",
      " |          .. versionadded:: 0.17\n",
      " |             *sample_weight* support to LogisticRegression.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      self\n",
      " |          Fitted estimator.\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      The SAGA solver supports both float64 and float32 bit arrays.\n",
      " |  \n",
      " |  predict_log_proba(self, X)\n",
      " |      Predict logarithm of probability estimates.\n",
      " |      \n",
      " |      The returned estimates for all classes are ordered by the\n",
      " |      label of classes.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      X : array-like of shape (n_samples, n_features)\n",
      " |          Vector to be scored, where `n_samples` is the number of samples and\n",
      " |          `n_features` is the number of features.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      T : array-like of shape (n_samples, n_classes)\n",
      " |          Returns the log-probability of the sample for each class in the\n",
      " |          model, where classes are ordered as they are in ``self.classes_``.\n",
      " |  \n",
      " |  predict_proba(self, X)\n",
      " |      Probability estimates.\n",
      " |      \n",
      " |      The returned estimates for all classes are ordered by the\n",
      " |      label of classes.\n",
      " |      \n",
      " |      For a multi_class problem, if multi_class is set to be \"multinomial\"\n",
      " |      the softmax function is used to find the predicted probability of\n",
      " |      each class.\n",
      " |      Else use a one-vs-rest approach, i.e calculate the probability\n",
      " |      of each class assuming it to be positive using the logistic function.\n",
      " |      and normalize these values across all the classes.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      X : array-like of shape (n_samples, n_features)\n",
      " |          Vector to be scored, where `n_samples` is the number of samples and\n",
      " |          `n_features` is the number of features.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      T : array-like of shape (n_samples, n_classes)\n",
      " |          Returns the probability of the sample for each class in the model,\n",
      " |          where classes are ordered as they are in ``self.classes_``.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes defined here:\n",
      " |  \n",
      " |  __annotations__ = {'_parameter_constraints': <class 'dict'>}\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from sklearn.linear_model._base.LinearClassifierMixin:\n",
      " |  \n",
      " |  decision_function(self, X)\n",
      " |      Predict confidence scores for samples.\n",
      " |      \n",
      " |      The confidence score for a sample is proportional to the signed\n",
      " |      distance of that sample to the hyperplane.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      X : {array-like, sparse matrix} of shape (n_samples, n_features)\n",
      " |          The data matrix for which we want to get the confidence scores.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      scores : ndarray of shape (n_samples,) or (n_samples, n_classes)\n",
      " |          Confidence scores per `(n_samples, n_classes)` combination. In the\n",
      " |          binary case, confidence score for `self.classes_[1]` where >0 means\n",
      " |          this class would be predicted.\n",
      " |  \n",
      " |  predict(self, X)\n",
      " |      Predict class labels for samples in X.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      X : {array-like, sparse matrix} of shape (n_samples, n_features)\n",
      " |          The data matrix for which we want to get the predictions.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      y_pred : ndarray of shape (n_samples,)\n",
      " |          Vector containing the class labels for each sample.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from sklearn.base.ClassifierMixin:\n",
      " |  \n",
      " |  score(self, X, y, sample_weight=None)\n",
      " |      Return the mean accuracy on the given test data and labels.\n",
      " |      \n",
      " |      In multi-label classification, this is the subset accuracy\n",
      " |      which is a harsh metric since you require for each sample that\n",
      " |      each label set be correctly predicted.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      X : array-like of shape (n_samples, n_features)\n",
      " |          Test samples.\n",
      " |      \n",
      " |      y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n",
      " |          True labels for `X`.\n",
      " |      \n",
      " |      sample_weight : array-like of shape (n_samples,), default=None\n",
      " |          Sample weights.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      score : float\n",
      " |          Mean accuracy of ``self.predict(X)`` w.r.t. `y`.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors inherited from sklearn.base.ClassifierMixin:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from sklearn.linear_model._base.SparseCoefMixin:\n",
      " |  \n",
      " |  densify(self)\n",
      " |      Convert coefficient matrix to dense array format.\n",
      " |      \n",
      " |      Converts the ``coef_`` member (back) to a numpy.ndarray. This is the\n",
      " |      default format of ``coef_`` and is required for fitting, so calling\n",
      " |      this method is only required on models that have previously been\n",
      " |      sparsified; otherwise, it is a no-op.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      self\n",
      " |          Fitted estimator.\n",
      " |  \n",
      " |  sparsify(self)\n",
      " |      Convert coefficient matrix to sparse format.\n",
      " |      \n",
      " |      Converts the ``coef_`` member to a scipy.sparse matrix, which for\n",
      " |      L1-regularized models can be much more memory- and storage-efficient\n",
      " |      than the usual numpy.ndarray representation.\n",
      " |      \n",
      " |      The ``intercept_`` member is not converted.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      self\n",
      " |          Fitted estimator.\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      For non-sparse models, i.e. when there are not many zeros in ``coef_``,\n",
      " |      this may actually *increase* memory usage, so use this method with\n",
      " |      care. A rule of thumb is that the number of zero elements, which can\n",
      " |      be computed with ``(coef_ == 0).sum()``, must be more than 50% for this\n",
      " |      to provide significant benefits.\n",
      " |      \n",
      " |      After calling this method, further fitting with the partial_fit\n",
      " |      method (if any) will not work until you call densify.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from sklearn.base.BaseEstimator:\n",
      " |  \n",
      " |  __getstate__(self)\n",
      " |      Helper for pickle.\n",
      " |  \n",
      " |  __repr__(self, N_CHAR_MAX=700)\n",
      " |      Return repr(self).\n",
      " |  \n",
      " |  __setstate__(self, state)\n",
      " |  \n",
      " |  get_params(self, deep=True)\n",
      " |      Get parameters for this estimator.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      deep : bool, default=True\n",
      " |          If True, will return the parameters for this estimator and\n",
      " |          contained subobjects that are estimators.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      params : dict\n",
      " |          Parameter names mapped to their values.\n",
      " |  \n",
      " |  set_params(self, **params)\n",
      " |      Set the parameters of this estimator.\n",
      " |      \n",
      " |      The method works on simple estimators as well as on nested objects\n",
      " |      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n",
      " |      parameters of the form ``<component>__<parameter>`` so that it's\n",
      " |      possible to update each component of a nested object.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      **params : dict\n",
      " |          Estimator parameters.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      self : estimator instance\n",
      " |          Estimator instance.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(LogisticRegression)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You see in the help documentation all the paramters for which you can assign values to affect the behavior of the class when you use it.  In the above output, you are shown (among others--below we've omitted ones not of interest here--but feel free to experiment!).\n",
    "  \n",
    "penalty = 'l2'  \n",
    "C = 1.0  \n",
    "fit_intercept = True  \n",
    "  \n",
    "The values given after the equal sign are the default values; farther down in the documentation each parameter is defined and the possible / allowed values are detailed.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "lTKK3xCDH7GK"
   },
   "source": [
    "### Tuning the Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "0c_CvQWMH7GL"
   },
   "source": [
    "We've just seen that the scikit-learn logistic regression model has some adjustable parameters (*hyperparameters*) we can tune to optimize performance. Keep in mind that optimizing performance means we want to minimize the gap between the model performance on the training set and the test/validation set. It's possible to get a very good score on the training set but do poorly on the test set, due to what is called \"overfitting'.  Overfitting refers to the case where the training performance is significantly higer than the test performance--this is caused by the model \"memorizing\" the training data. For tuning the parameters of your model, you will use a mix of *cross-validation* and *grid search*. In Logistic Regression, the most important parameter to tune is the *regularization parameter* ``C``. The regularization parameter is used to control for unlikely high regression coefficients, by adding a \"penalty\" to the loss term when the coefficients get larger.  For sklearn ``LogisticRegression``, ``C`` is the \"inverse regularization strength\", meaning smaller ``C`` constrains the paramters more. Also note that the actual penalty is determined by the \"penalty\" paramter, which defaults to ``l2``. l2 regularization uses a value ($\\lambda$) multipled by the sum of the squares of the model coefficients.  l1 regularization multiples $\\lambda$ by the sum of the absolute values of the weights. l2 is also called Ridge regularization (see section 3.4 and equation 3.41 in [The Elements of Statistical Learning](https://hastie.su.domains/Papers/ESLII.pdf)) and l1 is called Lasso regularization (see section 3.4 and equation 3.52, ibid).  So by default, smaller values of ``C`` will result in l2 regularization with larger $\\lambda$ and a greater penalty on the larger model coefficients. Lastly, note that the default value for ``C`` is 1, and along with the default penaly l2, means scikit-learn Logistic Regression *always* uses regularization. If you would like to build Logistic Regression models without regularization, you can use statsmodels (*).\n",
    "\n",
    "You will now implement some code to perform model tuning and selecting the regularization parameter ``C``.  \n",
    "  \n",
    "---\n",
    "(*) [statsmodels.discrete.discrete_model.Logit](https://www.statsmodels.org/stable/discretemod.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Side-Bar: Cross Validation\n",
    "\n",
    "Cross Validation refers to using a procedure to split the data into multiple train/validation splits, fitting a model using the training split, computing the performance metrics for the validation split over multiple splits. The metrics are typically averaged and the average value is reported as hopefully representative of what the model will do in the future on new data. Recall earlier we showed that across 25 splits the train and the test scores varied; a key idea behind cross validation is to avoid choosing a \"lucky\" split that happens to give great performance on the data at hand but does more poorly later.  Since the scores vary across random splits, it's assumed that the best score or the worst score aren't as likely to represent the future as an average. Some Data Scientists also report the standard deviation of the cv scores as a further measure of how confident they are in the score.\n",
    "\n",
    "<b>To summarize</b>:\n",
    "- the data are split multiple times (training/validation)\n",
    "- a model is fit to the train data on each split\n",
    "- the model is scored on the validation data on each split\n",
    "- the average (and sometimes standard deviation) of the score is reported as the cv score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "EzrmOosaH7GL"
   },
   "source": [
    "We use the following `cv_score` function to perform K-fold cross-validation and apply a scoring function to each test fold. A *fold* in this case just means a different split of the data, in this case random splits. The function generates five different splits (i.e. 5-fold validation), fits a classifier each time (note that the classifier is passed as a parameter to the function, so we can define it as anything that has a ``fit`` and ``predict`` method), and computes the \"score\", which by default is ``accuracy_score``. (Note the use of accuracy as the scoring metric--do you think this is the best approach for this problem?) Kfold is used to return sets of indices vs. the actual data, so the indices are generated, split, and passed as the vectors train, test to define the actual x and y data used on each pass. The scores are summed up in ``result``, and then the average is returned.\n",
    "\n",
    "Please do not confuse the train/test split that is done in the cv_score function with the initial train/test split that one does before building the model. As you will notice below, when cv_score is called, the actual parameters that will be bound to the formal parameters x, y are X_train, and y_train, which come from the original split of (X, y)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "c77hT32VH7GM"
   },
   "outputs": [],
   "source": [
    "def cv_score(clf, x, y, score_func = accuracy_score):\n",
    "    result = 0\n",
    "    nfold = 5\n",
    "    x.reset_index(drop = True, inplace = True)\n",
    "    y.index = x.index\n",
    "    for train, test in KFold(nfold, shuffle = True,\n",
    "                             random_state = 42).split(x):\n",
    "        clf.fit(x.loc[train, :], y[train])\n",
    "        result += score_func(clf.predict(x.loc[test, :]), y[test])\n",
    "    return result / nfold"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "jwrPgto2H7GO"
   },
   "source": [
    "Below is an example of using the `cv_score` function for a basic logistic regression model without regularization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "jtFdwvEbH7GP",
    "outputId": "dd089907-d94e-4c3f-fc91-e6a315bb186e",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.83\n"
     ]
    }
   ],
   "source": [
    "clf = LogisticRegression(solver = 'liblinear', max_iter = 500)\n",
    "score = cv_score(clf, Xlr, ylr)\n",
    "print(f'{score:.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's very important to understand this result. Earlier we showed that with different random splits, the train and test score would vary, and in our case the test score varied more than the train score. The key idea of cross-validation is to peform multiple splits. In this case, we defined our cv_score() function to return the average score across all splits. This is intended to be an estimate of the most likely performance of the model on unseen data. However, the actual results will still vary. Note that in this case the value is in between what we obtained with a single split for the train set and the test set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "kODxGyOxH7GR"
   },
   "source": [
    "<div class=\"span5 alert alert-info\">\n",
    "<h3>Checkup Exercise Set II</h3>\n",
    "\n",
    "<b>Exercise:</b> Implement the following search procedure to find a good model\n",
    "<ul>\n",
    "<li> You are given a list of possible values of `C` below\n",
    "<li> For each `C`:\n",
    "  <ol>\n",
    "  <li> Create a logistic regression model with that value of `C`\n",
    "  <li> Find the average score for this model using the `cv_score` function **only on the training set** `(Xlr, ylr)`\n",
    "  </ol>\n",
    "<li> Pick the `C` with the highest average score\n",
    "</ul><br>\n",
    "Your goal is to find the best model parameters based *only* on the training set, without showing the model test set at all (which is why the test set is also called a *hold-out* set).  \n",
    "\n",
    "Comment on the value of the score using the best `C` vs. what we had before.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best C: 1\n",
      "Best Score: 0.8267073170731708\n"
     ]
    }
   ],
   "source": [
    "# Initialize variables to store best score and best C\n",
    "best_score = -1\n",
    "best_C = None\n",
    "\n",
    "# List of possible values of C\n",
    "Cs = [0.001, 0.1, 1, 10, 100]\n",
    "\n",
    "# Iterate through each value of C\n",
    "for C in Cs:\n",
    "    # Create logistic regression model with current value of C\n",
    "    lr = LogisticRegression(C=C, max_iter=10000)\n",
    "    \n",
    "    # Calculate average score using cross-validation on training set\n",
    "    avg_score = cv_score(lr, Xlr, ylr )  # Replace X_train and y_train with your training data\n",
    "    \n",
    "    # Check if current model has better score than previous best\n",
    "    if avg_score > best_score:\n",
    "        best_score = avg_score\n",
    "        best_C = C\n",
    "\n",
    "# Output the best C and its corresponding score\n",
    "print(\"Best C:\", best_C)\n",
    "print(\"Best Score:\", best_score)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "sXRC8rlbH7GV"
   },
   "source": [
    "<div class=\"span5 alert alert-info\">\n",
    "<h3>Checkup Exercise Set III</h3><br>\n",
    "    <b>Exercise:</b> Now you want to estimate how this model will predict on unseen data in the following way:\n",
    "<ol>\n",
    "    <li> Use the <i>C</i> you obtained from the procedure earlier and train a Logistic Regression on the training data\n",
    "<li> Calculate the accuracy on the test data\n",
    "</ol>\n",
    "\n",
    "You may notice that this particular value of <i>C</i> may or may not do as well as simply running the default model on a random train-test split.\n",
    "\n",
    "<ul>\n",
    "<li> Do you think that's a problem? \n",
    "<li> Why do we need to do this whole cross-validation and grid search stuff anyway?\n",
    "</ul>\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on test data: 0.8811881188118812\n"
     ]
    }
   ],
   "source": [
    "# Train a logistic regression model with the best value of C on the training data\n",
    "best_C = 1 \n",
    "lr = LogisticRegression(C=best_C, max_iter=10000) \n",
    "lr.fit(Xlr, ylr)  # Training on the full training set\n",
    "\n",
    "# Evaluate the model's accuracy on the test data\n",
    "test_accuracy = accuracy_score(ylr, lr.predict(Xlr))\n",
    "\n",
    "print(\"Accuracy on test data:\", test_accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8VNaKmftH7Gb"
   },
   "source": [
    "### Black Box Grid Search in `sklearn`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8LWn47nCH7Gc"
   },
   "source": [
    "Scikit-learn, as with many other Python packages, provides utilities to perform common operations so you do not have to implement them yourself. It is important to understand the mechanics of each operation, but at a certain point, you will want to use the utility instead to save time..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8FGPwNBPH7Gd"
   },
   "source": [
    "<div class=\"span5 alert alert-info\">\n",
    "<h3>Checkup Exercise Set IV</h3>\n",
    "\n",
    "<b>Exercise:</b> Use scikit-learn's [GridSearchCV](http://scikit-learn.org/stable/modules/generated/sklearn.grid_search.GridSearchCV.html) tool to perform cross validation and grid search. \n",
    "\n",
    "* Instead of writing your own loops above to iterate over the model parameters, can you use GridSearchCV to find the best model over the training set? \n",
    "* Does it give you the same best value of C?\n",
    "* How does this model you've obtained perform on the test set?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'C': 0.1}\n",
      "Accuracy on test data: 0.8712871287128713\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "# Define the logistic regression model\n",
    "lr = LogisticRegression(max_iter=10000)\n",
    "\n",
    "# Define the parameter grid to search\n",
    "param_grid = {'C': [0.001, 0.1, 1, 10, 100]}\n",
    "\n",
    "# Perform grid search with 5-fold cross-validation\n",
    "grid_search = GridSearchCV(lr, param_grid, cv=5)\n",
    "grid_search.fit(Xlr, ylr)  # Fit on the training data\n",
    "\n",
    "# Get the best model and its parameters\n",
    "best_model = grid_search.best_estimator_\n",
    "best_params = grid_search.best_params_\n",
    "\n",
    "print(\"Best parameters:\", best_params)\n",
    "\n",
    "# Evaluate the best model on the test data\n",
    "test_accuracy = best_model.score(Xlr, ylr)\n",
    "print(\"Accuracy on test data:\", test_accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So in a few lines of code, utilizing the functionality provied by scikit-learn, you can reproduce what took about 20 lines of code \"from scratch\". The goal here was to illustrate how to understand what is occurring when you use these advanced features.  It's always a good idea to do some experimenting and exploring to ensure you understand the tools you are using!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Summary\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This case study has introduced using the Logistic Regression algorithm to classify a binary outcome, in this case the presence or absence of heart disease. You have seen how to tune a hyperparamter *C*, the  \"inverse regularization strength\" to get a model that has a good average cross-vaidation score on the held-out data.  \n",
    "\n",
    "Logistic regression is an excellent choice for a \"baseline\" classifier, even when you plan to test more complicated algorithms on a problem. Have a well-performing baseline makes it more clear when using a more complex method adds value."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "MCmALJTwH7Gi"
   },
   "source": [
    "## Optional: Appendix  \n",
    "#### Note: \n",
    "Most of the following material is taken verbatim from the Logistic Regression section of the CS109 tutorial found at https://github.com/cs109/2015lab5/blob/master/Classification.ipynb\n",
    "\n",
    "### A Walkthrough of the Math Behind Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We could approach classification as linear regression, where the class, 0 or 1, is the target variable $y$. But this ignores the fact that our output $y$ is discrete valued, and futhermore, the $y$ predicted by linear regression will in general take on values less than 0 and greater than 1. Thus this does not seem like a very good idea.\n",
    "\n",
    "But what if we could change the form of our hypotheses $h(x)$ instead?\n",
    "\n",
    "The idea behind logistic regression is very simple. We want to draw a line in feature space that divides the '1' samples from the '0' samples, just like in the diagram above. In other words, we wish to find the \"regression\" line which divides the samples. Now, a line has the form $w_1 x_1 + w_2 x_2 + w_0 = 0$ in 2-dimensions. On one side of this line we have \n",
    "\n",
    "$$w_1 x_1 + w_2 x_2 + w_0 \\ge 0,$$\n",
    "\n",
    "and on the other side we have \n",
    "\n",
    "$$w_1 x_1 + w_2 x_2 + w_0 < 0.$$ \n",
    "\n",
    "Our classification rule then becomes:\n",
    "\n",
    "\\begin{eqnarray*}\n",
    "y = 1\\;\\; &if&\\; \\textbf{w}\\cdot\\textbf{x} \\ge 0\\\\\n",
    "y = 0\\;\\; &if&\\; \\textbf{w}\\cdot\\textbf{x} < 0\n",
    "\\end{eqnarray*}\n",
    "\n",
    "where $ \\textbf{x}$ is the vector $\\{1,x_1, x_2,...,x_n\\}$ where we have also generalized to more than 2 features.\n",
    "\n",
    "What hypotheses $h$ can we use to achieve this? One way to do so is to use the **sigmoid** function:\n",
    "\n",
    "$$h(z) = \\frac{1}{1 + e^{-z}}.$$\n",
    "\n",
    "Notice that at $z=0$ this function has the value 0.5. If $z > 0$, $h > 0.5$ and as $z \\to \\infty$, $h \\to 1$. If $z < 0$, $h < 0.5$ and as $z \\to -\\infty$, $h \\to 0$. As long as we identify any value of $y > 0.5$ as 1, and any $y < 0.5$ as 0, we can achieve what we wished above.\n",
    "\n",
    "This function is plotted below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GW9tbwaqH7Gs",
    "outputId": "372a82a7-5a65-4647-c660-3e982960e7ad"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 450x450 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "h = lambda z: 1. / (1 + np.exp(-z))\n",
    "zs = np.arange(-5, 5, 0.1)\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(zs, h(zs), alpha=0.5)\n",
    "ax.set_ylabel('Sigmoid Output')\n",
    "ax.set_xlabel('Sigmoid Input')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "WxuHhldPH7Gw"
   },
   "source": [
    "You can see the effect of the Sigmoid function is to \"squash\" the input values to between 0 and 1, and because of the steep slope in the middle, it will tend to output values towards 0 or 1 if the input is somewhat different than 0.\n",
    "\n",
    "So we then come up with our rule by identifying:\n",
    "\n",
    "$$z = \\textbf{w}\\cdot\\textbf{x}.$$\n",
    "\n",
    "Then $h(\\textbf{w}\\cdot\\textbf{x}) \\ge 0.5$ if $\\textbf{w}\\cdot\\textbf{x} \\ge 0\\;$  and  $\\;h(\\textbf{w}\\cdot\\textbf{x}) \\lt 0.5$ if $\\textbf{w}\\cdot\\textbf{x} \\lt 0$, and:\n",
    "\n",
    "\\begin{eqnarray*}\n",
    "y = 1 \\;\\; &if&\\; h(\\textbf{w}\\cdot\\textbf{x}) \\ge 0.5\\\\\n",
    "y = 0 \\;\\; &if&\\; h(\\textbf{w}\\cdot\\textbf{x}) \\lt 0.5.\n",
    "\\end{eqnarray*}\n",
    "\n",
    "We will show soon that this identification can be achieved by minimizing a loss in the ERM framework called the **log loss** :\n",
    "\n",
    "$$ R_{\\cal{D}}(\\textbf{w}) = - \\sum_{y_i \\in \\cal{D}} \\left ( y_i \\log(h(\\textbf{w}\\cdot\\textbf{x})) + ( 1 - y_i) \\log(1 - h(\\textbf{w}\\cdot\\textbf{x})) \\right )$$\n",
    "\n",
    "We will also add a regularization term:\n",
    "\n",
    "$$ R_{\\cal{D}}(\\textbf{w}) = - \\sum_{y_i \\in \\cal{D}} \\left ( y_i \\log(h(\\textbf{w}\\cdot\\textbf{x})) + ( 1 - y_i) \\log(1 - h(\\textbf{w}\\cdot\\textbf{x})) \\right ) + \\frac{1}{C} \\textbf{w}\\cdot\\textbf{w},$$\n",
    "\n",
    "where $C$ is the regularization strength (equivalent to $1/\\alpha$ from the Ridge case), and smaller values of $C$ mean stronger regularization. As before, the regularization tries to prevent features from having terribly high weights, thus implementing a form of feature selection. \n",
    "\n",
    "How did we come up with this loss? We'll come back to that, but let us see how logistic regression works out. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "7q7uV37WHunX"
   },
   "source": [
    "### The Probabalistic Interpretation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "VW4XoUruHunX"
   },
   "source": [
    "Remember we said earlier that if $h > 0.5$ we ought to identify the sample with $y=1$? One way of thinking about this is to identify $h({w}\\cdot{x})$ with the probability that the sample is a '1'  $\\;$($y=1$). Then we have the intuitive notion that lets identify a sample as 1 if we find that the probabilty of being a '1' is $\\;\\ge 0.5$.\n",
    "\n",
    "So suppose we say then that the probability of $y=1$ for a given $\\textbf{x}$ is given by $h(\\textbf{w}\\cdot\\textbf{x})$?\n",
    "\n",
    "Then, the conditional probabilities of $y=1$ or $y=0$ given a particular sample's features $\\v{x}$ are:\n",
    "\n",
    "\\begin{eqnarray*}\n",
    "P(y=1 | \\textbf{x}) &=& h(\\textbf{w}\\cdot\\textbf{x}) \\\\\n",
    "P(y=0 | \\textbf{x}) &=& 1 - h(\\textbf{w}\\cdot\\textbf{x}).\n",
    "\\end{eqnarray*}\n",
    "\n",
    "These two can be written together as\n",
    "\n",
    "$$P(y|\\textbf{x}, \\textbf{w}) = h(\\textbf{w}\\cdot\\textbf{x})^y \\left(1 - h(\\textbf{w}\\cdot\\textbf{x}) \\right)^{(1-y)} $$\n",
    "\n",
    "Then multiplying over the samples we get the probability of the training $y$ given $\\textbf{w}$ and the $\\textbf{x}$:\n",
    "\n",
    "$$P(y|\\textbf{x},\\textbf{w}) = P(\\{y_i\\} | \\{\\textbf{x}_i\\}, \\textbf{w}) = \\prod_{y_i \\in \\cal{D}} P(y_i|\\textbf{x_i}, \\textbf{w}) = \\prod_{y_i \\in \\cal{D}} h(\\textbf{w}\\cdot\\textbf{x_i})^{y_i} \\left(1 - h(\\textbf{w}\\cdot\\textbf{x_i}) \\right)^{(1-y_i)}$$\n",
    "\n",
    "Why use probabilities? Earlier, we talked about how the regression function $f(x)$ never gives us the $y$ exactly, because of noise. This hold for classification too. Even with identical features, a different sample may be classified differently. \n",
    "\n",
    "We said that another way to think about a noisy $y$ is to imagine that our data $\\mathcal{D}$ was generated from  a joint probability distribution $P(x,y)$. Thus we need to model $y$ at a given $x$, written as $P(y|x)$, and since $P(x)$ is also a probability distribution, we have:\n",
    "\n",
    "$$P(x,y) = P(y | x) P(x)$$\n",
    "\n",
    "and can obtain our joint probability $P(x, y)$.\n",
    "\n",
    "Indeed its important to realize that a particular training set can be thought of as a draw from some \"true\" probability distribution (just as we did when showing the hairy variance diagram). If for example the probability of classifying a test sample as a '0' was 0.1, and it turns out that the test sample was a '0', it does not mean that this model was necessarily wrong. After all, in roughly a 10th of the draws, this new sample would be classified as a '0'! But, of-course its more unlikely than its likely, and having good probabilities means that we'll be likely right most of the time, which is what we want to achieve in classification. And furthermore, we can quantify this accuracy.\n",
    "\n",
    "Thus its desirable to have probabilistic, or at the very least, ranked models of classification where you can tell which sample is more likely to be classified as a '1'. There are business reasons for this too. Consider the example of customer \"churn\": you are a cell-phone company and want to know, based on some of my purchasing habit and characteristic \"features\" if I am a likely defector. If so, you'll offer me an incentive not to defect. In this scenario, you might want to know which customers are most likely to defect, or even more precisely, which are most likely to respond to incentives. Based on these probabilities, you could then spend a finite marketing budget wisely."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "KPOA3PdeHunY"
   },
   "source": [
    "### Maximizing the Probability of the Training Set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "3VlYAPRnHunY"
   },
   "source": [
    "Now if we maximize $P(y|\\textbf{x},\\textbf{w})$, we will maximize the chance that each point is classified correctly, which is what we want to do. While this is not exactly the same thing as maximizing the 1-0 training risk, it is a principled way of obtaining the highest probability classification. This process is called **maximum likelihood** estimation since we are maximising the **likelihood of the training data y**, \n",
    "\n",
    "$$\\mathcal{L} = P(y|\\textbf{x},\\textbf{w}).$$ \n",
    "\n",
    "Maximum likelihood is one of the corenerstone methods in statistics, and is used to estimate probabilities of data. \n",
    "\n",
    "We can equivalently maximize \n",
    "\n",
    "$$\\ell = \\log{P(y|\\textbf{x},\\textbf{w})}$$ \n",
    "\n",
    "since the natural logarithm $\\log$ is a monotonic function. This is known as maximizing the **log-likelihood**. Thus we can equivalently *minimize* a risk that is the negative of  $\\log(P(y|\\textbf{x},\\textbf{w}))$:\n",
    "\n",
    "$$R_{\\cal{D}}(h(x)) = -\\ell = -\\log \\mathcal{L} = -\\log{P(y|\\textbf{x},\\textbf{w})}$$\n",
    "\n",
    "\n",
    "Thus\n",
    "\n",
    "\\begin{eqnarray*}\n",
    "R_{\\cal{D}}(h(x)) &=& -\\log\\left(\\prod_{y_i \\in \\cal{D}} h(\\textbf{w}\\cdot\\textbf{x_i})^{y_i} \\left(1 - h(\\textbf{w}\\cdot\\textbf{x_i}) \\right)^{(1-y_i)}\\right)\\\\\n",
    "                  &=& -\\sum_{y_i \\in \\cal{D}} \\log\\left(h(\\textbf{w}\\cdot\\textbf{x_i})^{y_i} \\left(1 - h(\\textbf{w}\\cdot\\textbf{x_i}) \\right)^{(1-y_i)}\\right)\\\\                  \n",
    "                  &=& -\\sum_{y_i \\in \\cal{D}} \\log\\,h(\\textbf{w}\\cdot\\textbf{x_i})^{y_i} + \\log\\,\\left(1 - h(\\textbf{w}\\cdot\\textbf{x_i}) \\right)^{(1-y_i)}\\\\\n",
    "                  &=& - \\sum_{y_i \\in \\cal{D}} \\left ( y_i \\log(h(\\textbf{w}\\cdot\\textbf{x})) + ( 1 - y_i) \\log(1 - h(\\textbf{w}\\cdot\\textbf{x})) \\right )\n",
    "\\end{eqnarray*}\n",
    "                  \n",
    "This is exactly the risk we had above, leaving out the regularization term (which we shall return to later) and was the reason we chose it over the 1-0 risk. \n",
    "\n",
    "Notice that this little process we carried out above tells us something very interesting: **Probabilistic estimation using maximum likelihood is equivalent to Empiricial Risk Minimization using the negative log-likelihood**, since all we did was to minimize the negative log-likelihood over the training samples.\n",
    "\n",
    "`sklearn` will return the probabilities for our samples, or for that matter, for any input vector set $\\{\\textbf{x}_i\\}$, i.e. $P(y_i | \\textbf{x}_i, \\textbf{w})$:\n",
    "\n",
    "Let us plot the probabilities obtained from `predict_proba`, overlayed on the samples with their true labels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "7T9bA2tyHunZ"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.0137108 , 0.9862892 ],\n",
       "       [0.00540014, 0.99459986],\n",
       "       [0.02372191, 0.97627809],\n",
       "       [0.13594937, 0.86405063],\n",
       "       [0.89512288, 0.10487712],\n",
       "       [0.78973913, 0.21026087],\n",
       "       [0.96625268, 0.03374732],\n",
       "       [0.49761096, 0.50238904],\n",
       "       [0.82929914, 0.17070086],\n",
       "       [0.95626833, 0.04373167],\n",
       "       [0.45401096, 0.54598904],\n",
       "       [0.45796068, 0.54203932],\n",
       "       [0.93677382, 0.06322618],\n",
       "       [0.88748086, 0.11251914],\n",
       "       [0.95535549, 0.04464451],\n",
       "       [0.08067024, 0.91932976],\n",
       "       [0.00336342, 0.99663658],\n",
       "       [0.97142627, 0.02857373],\n",
       "       [0.88721313, 0.11278687],\n",
       "       [0.04835207, 0.95164793],\n",
       "       [0.00164187, 0.99835813],\n",
       "       [0.92405638, 0.07594362],\n",
       "       [0.2436495 , 0.7563505 ],\n",
       "       [0.03802645, 0.96197355],\n",
       "       [0.01198101, 0.98801899],\n",
       "       [0.89601299, 0.10398701],\n",
       "       [0.97833617, 0.02166383],\n",
       "       [0.98142395, 0.01857605],\n",
       "       [0.85158141, 0.14841859],\n",
       "       [0.24964455, 0.75035545],\n",
       "       [0.95896723, 0.04103277],\n",
       "       [0.25674933, 0.74325067],\n",
       "       [0.07652715, 0.92347285],\n",
       "       [0.02473091, 0.97526909],\n",
       "       [0.94090958, 0.05909042],\n",
       "       [0.93370598, 0.06629402],\n",
       "       [0.65342616, 0.34657384],\n",
       "       [0.0095411 , 0.9904589 ],\n",
       "       [0.30382668, 0.69617332],\n",
       "       [0.91614148, 0.08385852],\n",
       "       [0.60363522, 0.39636478],\n",
       "       [0.02735441, 0.97264559],\n",
       "       [0.52444518, 0.47555482],\n",
       "       [0.97283164, 0.02716836],\n",
       "       [0.6384857 , 0.3615143 ],\n",
       "       [0.37270835, 0.62729165],\n",
       "       [0.76647663, 0.23352337],\n",
       "       [0.99576336, 0.00423664],\n",
       "       [0.00684562, 0.99315438],\n",
       "       [0.09876668, 0.90123332],\n",
       "       [0.9791153 , 0.0208847 ],\n",
       "       [0.89016966, 0.10983034],\n",
       "       [0.6721913 , 0.3278087 ],\n",
       "       [0.97164923, 0.02835077],\n",
       "       [0.04050871, 0.95949129],\n",
       "       [0.79568717, 0.20431283],\n",
       "       [0.99157491, 0.00842509],\n",
       "       [0.94301141, 0.05698859],\n",
       "       [0.97579206, 0.02420794],\n",
       "       [0.08968864, 0.91031136],\n",
       "       [0.58676414, 0.41323586],\n",
       "       [0.96946141, 0.03053859],\n",
       "       [0.00599574, 0.99400426],\n",
       "       [0.94755343, 0.05244657],\n",
       "       [0.7143858 , 0.2856142 ],\n",
       "       [0.96962606, 0.03037394],\n",
       "       [0.03112211, 0.96887789],\n",
       "       [0.00443988, 0.99556012]])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict_proba(Xtestlr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To illustrate further, we return to our simplistic two-feature classifier we created earlier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "yE3BTqqNHund"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1000, max_iter=500, solver='liblinear')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xtrain, Xtest, ytrain, ytest = \\\n",
    "    train_test_split(dflog[['cholesterol_mg_dl','resting_BP_mm_Hg']],\n",
    "                     dflog['heart_disease'],\n",
    "                     train_size = 0.80,\n",
    "                     random_state = 42)\n",
    "classifier = LogisticRegression(solver = 'liblinear', max_iter = 500, C = 1000)\n",
    "classifier.fit(Xtrain, ytrain)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, we will use the other function we defined, to label the points using the *predicted* values (earlier we labeled them with their actual values) and label the probabilities output by the classifier. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 450x450 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "ax = plt.gca()\n",
    "ax.set_ylabel('Resting blood pressure (mm Hg)')\n",
    "ax.set_xlabel('Cholesterol level (mg/dl)')\n",
    "_ = points_plot_prob(ax, Xtrain, Xtest, ytrain, ytest, classifier, psize = 20, alpha = 0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "_jOAibq0Hung"
   },
   "source": [
    "Notice that lines of equal probability, as might be expected are stright lines. What the classifier does is very intuitive: if the probability is greater than 0.5, it classifies the sample as type '1' (has heart disease), otherwise it classifies the sample to be class '0' (no heart disease). Thus in the diagram above, where we have plotted predicted values rather than actual labels of samples, there is a clear demarcation at the 0.5 probability line.\n",
    "\n",
    "Again, this notion of trying to obtain the line or boundary of demarcation is what is called a **discriminative** classifier. The algorithm tries to find a decision boundary that separates those who have heart disease from those who do not. To classify a new sample, it checks on which side of the decision boundary the sample falls, and makes a prediction. In other words we are asking, given $\\textbf{x}$, what is the probability of a given $y$, or, what is the likelihood $P(y|\\textbf{x},\\textbf{w})$?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cohgzM2BHunc"
   },
   "source": [
    "### Discriminative vs Generative Classifiers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "WBf2j5fRHunc"
   },
   "source": [
    "Logistic regression is what is known as a **discriminative classifier** as we learn a soft boundary between/among classes. Another paradigm is the **generative classifier** where we learn the distribution of each class. For more examples of generative classifiers, look [here](https://en.wikipedia.org/wiki/Generative_model). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
